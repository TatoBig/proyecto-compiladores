// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/com/mycompany/jflex/test/flex/Hola.flex

/* Seccion 1 */
package com.mycompany.jflex.test;
/* import java_cup.runtime.Symbol; */
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.File;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexicoSolo {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\37\u0200\1\u0500"+
    "\u1000\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\0\1\7\2\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\12\20\1\21\1\22\1\23"+
    "\1\24\1\25\2\0\1\26\1\27\1\30\1\31\1\32"+
    "\10\30\1\33\1\34\1\35\1\30\1\36\10\30\1\37"+
    "\1\0\1\40\1\0\1\41\1\0\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\2\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\53\1\61\1\62\1\63"+
    "\1\64\1\65\1\53\1\66\1\53\1\67\1\70\1\0"+
    "\1\71\7\0\1\3\33\0\1\72\7\0\1\72\3\0"+
    "\1\72\3\0\1\72\1\0\1\72\6\0\1\72\10\0"+
    "\1\73\235\0\1\74\u01b6\0\1\74\3\0\1\74\13\0"+
    "\2\3\6\0\1\74\317\0\u0100\3\375\0\1\74\2\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\3\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\4\24\1\25"+
    "\1\26\20\27\1\30\1\31\1\1\1\32\1\0\1\33"+
    "\1\34\1\35\1\0\1\36\1\37\1\0\1\40\1\41"+
    "\1\42\1\24\1\0\1\43\1\24\1\0\26\27\1\44"+
    "\2\27\2\0\2\36\1\45\1\24\37\27\1\0\1\46"+
    "\1\24\24\27\1\47\3\27\1\50\4\27\1\51\1\52"+
    "\1\53\1\54\2\27\1\24\2\27\1\55\3\27\1\56"+
    "\10\27\1\57\1\60\14\27\1\24\1\27\1\61\1\27"+
    "\1\62\4\27\1\63\20\27\1\24\1\64\12\27\1\65"+
    "\3\27\1\66\11\27\1\24\6\27\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\3\27\1\75\1\76\1\77\2\27"+
    "\1\100\1\101\1\102\1\27\1\103\10\27\1\104\3\27"+
    "\1\105\5\27\1\106\1\27\1\107\1\27\1\110\1\111"+
    "\2\27\1\112\1\113\1\114\1\115\1\116\3\27\1\117"+
    "\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[309];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\75\0\75\0\75\0\172\0\267\0\364"+
    "\0\75\0\75\0\75\0\75\0\u0131\0\75\0\u016e\0\75"+
    "\0\u01ab\0\u01e8\0\75\0\75\0\u0225\0\u0262\0\u029f\0\u02dc"+
    "\0\u0319\0\u0356\0\u0393\0\75\0\75\0\u03d0\0\u040d\0\u044a"+
    "\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632"+
    "\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\75\0\75\0\u07a0"+
    "\0\75\0\364\0\364\0\75\0\75\0\u07dd\0\u081a\0\u0857"+
    "\0\u0894\0\75\0\75\0\75\0\u08d1\0\u090e\0\u0319\0\u094b"+
    "\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33"+
    "\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b"+
    "\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03"+
    "\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\75\0\u1034\0\u0319\0\u1071"+
    "\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259"+
    "\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441"+
    "\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629"+
    "\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811"+
    "\0\75\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc"+
    "\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4"+
    "\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u03d0\0\u1d4f"+
    "\0\u1d8c\0\u1dc9\0\u03d0\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u03d0"+
    "\0\u03d0\0\u03d0\0\u03d0\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee"+
    "\0\u03d0\0\u202b\0\u2068\0\u20a5\0\u03d0\0\u20e2\0\u211f\0\u215c"+
    "\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\u03d0\0\u03d0\0\u22ca"+
    "\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2"+
    "\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u03d0"+
    "\0\u269a\0\u26d7\0\u2714\0\u2751\0\u03d0\0\u278e\0\u27cb\0\u2808"+
    "\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0"+
    "\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u03d0\0\u2b9b"+
    "\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46\0\u2d83"+
    "\0\u2dc0\0\u03d0\0\u2dfd\0\u2e3a\0\u2e77\0\u03d0\0\u2eb4\0\u2ef1"+
    "\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9"+
    "\0\u3116\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247\0\u03d0\0\u03d0"+
    "\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u3284\0\u32c1\0\u32fe\0\u03d0"+
    "\0\u03d0\0\u03d0\0\u333b\0\u3378\0\u03d0\0\u03d0\0\u03d0\0\u33b5"+
    "\0\u0319\0\u33f2\0\u342f\0\u346c\0\u34a9\0\u34e6\0\u3523\0\u3560"+
    "\0\u359d\0\u03d0\0\u35da\0\u3617\0\u3654\0\u03d0\0\u3691\0\u36ce"+
    "\0\u370b\0\u3748\0\u3785\0\u03d0\0\u37c2\0\u03d0\0\u37ff\0\u03d0"+
    "\0\u03d0\0\u383c\0\u3879\0\u03d0\0\u03d0\0\u03d0\0\u03d0\0\u03d0"+
    "\0\u38b6\0\u38f3\0\u3930\0\u03d0\0\u03d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[309];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\5\31"+
    "\1\32\1\33\1\31\1\34\1\35\1\2\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\36\1\44\1\45\1\36"+
    "\1\46\1\47\1\50\1\36\1\51\1\52\1\53\1\54"+
    "\1\36\1\55\2\36\1\56\1\57\1\2\1\60\1\2"+
    "\77\0\1\4\116\0\1\61\50\0\2\62\1\0\1\62"+
    "\1\0\1\62\1\63\66\62\13\0\1\64\76\0\1\65"+
    "\71\0\1\66\4\0\1\67\75\0\1\22\5\0\11\70"+
    "\2\0\27\70\3\0\1\71\25\0\1\72\74\0\1\73"+
    "\74\0\1\74\70\0\1\31\5\0\5\31\1\75\3\31"+
    "\2\0\27\31\3\0\1\76\21\0\1\31\5\0\11\31"+
    "\2\0\27\31\3\0\1\76\21\0\1\31\5\0\10\31"+
    "\1\77\2\0\27\31\3\0\1\76\21\0\1\31\5\0"+
    "\11\31\2\0\20\31\1\100\6\31\3\0\1\76\21\0"+
    "\1\36\5\0\11\36\2\0\27\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\16\36\1\102\10\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\1\36\1\103"+
    "\11\36\1\104\2\36\1\105\10\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\5\36\1\106\21\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\13\36\1\107"+
    "\1\36\1\110\3\36\1\111\3\36\1\112\1\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\1\36\1\113"+
    "\25\36\3\0\1\101\21\0\1\36\5\0\11\36\2\0"+
    "\1\36\1\114\25\36\3\0\1\101\21\0\1\36\5\0"+
    "\11\36\2\0\15\36\1\115\11\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\5\36\1\116\10\36\1\117"+
    "\10\36\3\0\1\101\21\0\1\36\5\0\11\36\2\0"+
    "\5\36\1\120\3\36\1\121\15\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\23\36\1\122\3\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\20\36\1\123"+
    "\2\36\1\124\3\36\3\0\1\101\21\0\1\36\5\0"+
    "\11\36\2\0\1\36\1\125\3\36\1\126\21\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\5\36\1\127"+
    "\3\36\1\130\15\36\3\0\1\101\21\0\1\36\5\0"+
    "\11\36\2\0\1\36\1\131\25\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\5\36\1\132\21\36\3\0"+
    "\1\101\73\0\1\36\1\0\1\31\12\133\1\134\62\133"+
    "\2\67\1\135\1\67\1\136\70\67\20\0\1\70\5\0"+
    "\11\70\2\0\27\70\3\0\1\71\73\0\1\70\1\0"+
    "\1\70\20\0\1\31\5\0\3\31\1\137\5\31\2\0"+
    "\27\31\3\0\1\76\73\0\1\31\1\0\1\31\20\0"+
    "\1\31\5\0\11\31\2\0\11\31\1\140\15\31\3\0"+
    "\1\76\73\0\1\36\1\0\1\36\20\0\1\36\5\0"+
    "\11\36\2\0\13\36\1\141\13\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\4\36\1\142\22\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\1\36\1\143"+
    "\25\36\3\0\1\101\21\0\1\36\5\0\11\36\2\0"+
    "\15\36\1\144\3\36\1\145\5\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\3\36\1\146\15\36\1\147"+
    "\2\36\1\150\2\36\3\0\1\101\21\0\1\36\5\0"+
    "\11\36\2\0\11\36\1\151\15\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\22\36\1\152\4\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\3\36\1\153"+
    "\16\36\1\154\4\36\3\0\1\101\21\0\1\36\5\0"+
    "\11\36\2\0\22\36\1\155\4\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\13\36\1\156\13\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\3\36\1\157"+
    "\23\36\3\0\1\101\21\0\1\36\5\0\11\36\2\0"+
    "\3\36\1\160\15\36\1\161\5\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\5\36\1\162\21\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\7\36\1\163"+
    "\17\36\3\0\1\101\21\0\1\36\5\0\11\36\2\0"+
    "\22\36\1\164\4\36\3\0\1\101\21\0\1\36\5\0"+
    "\11\36\2\0\5\36\1\165\21\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\13\36\1\166\13\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\11\36\1\167"+
    "\4\36\1\170\10\36\3\0\1\101\21\0\1\36\5\0"+
    "\11\36\2\0\2\36\1\171\24\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\11\36\1\172\15\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\1\36\1\173"+
    "\25\36\3\0\1\101\21\0\1\36\5\0\11\36\2\0"+
    "\15\36\1\174\11\36\3\0\1\101\21\0\1\36\5\0"+
    "\11\36\2\0\15\36\1\175\11\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\15\36\1\176\11\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\20\36\1\177"+
    "\6\36\3\0\1\101\1\0\12\133\1\200\62\133\12\0"+
    "\1\134\4\0\1\201\57\0\1\135\112\0\1\31\5\0"+
    "\11\31\2\0\15\31\1\202\11\31\3\0\1\76\21\0"+
    "\1\36\5\0\11\36\2\0\5\36\1\203\21\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\5\36\1\204"+
    "\21\36\3\0\1\101\21\0\1\36\5\0\11\36\2\0"+
    "\21\36\1\205\5\36\3\0\1\101\21\0\1\36\5\0"+
    "\11\36\2\0\21\36\1\206\5\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\5\36\1\207\21\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\20\36\1\210"+
    "\6\36\3\0\1\101\21\0\1\36\5\0\11\36\2\0"+
    "\4\36\1\211\15\36\1\212\4\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\16\36\1\213\10\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\14\36\1\214"+
    "\12\36\3\0\1\101\21\0\1\36\5\0\11\36\2\0"+
    "\5\36\1\215\10\36\1\216\10\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\20\36\1\217\6\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\1\36\1\220"+
    "\25\36\3\0\1\101\21\0\1\36\5\0\11\36\2\0"+
    "\11\36\1\221\15\36\3\0\1\101\21\0\1\36\5\0"+
    "\11\36\2\0\21\36\1\222\5\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\5\36\1\223\21\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\13\36\1\224"+
    "\4\36\1\225\6\36\3\0\1\101\21\0\1\36\5\0"+
    "\11\36\2\0\22\36\1\226\4\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\20\36\1\227\6\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\1\36\1\230"+
    "\25\36\3\0\1\101\21\0\1\36\5\0\11\36\2\0"+
    "\16\36\1\231\10\36\3\0\1\101\21\0\1\36\5\0"+
    "\11\36\2\0\15\36\1\232\11\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\16\36\1\233\10\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\24\36\1\234"+
    "\2\36\3\0\1\101\21\0\1\36\5\0\11\36\2\0"+
    "\17\36\1\235\2\36\1\236\4\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\13\36\1\237\13\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\26\36\1\240"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\13\36"+
    "\1\241\13\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\16\36\1\242\10\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\16\36\1\243\10\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\7\36\1\244\17\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\4\36"+
    "\1\245\22\36\3\0\1\101\1\0\12\133\1\200\4\133"+
    "\1\201\55\133\20\0\1\31\5\0\11\31\2\0\3\31"+
    "\1\246\23\31\3\0\1\76\21\0\1\36\5\0\11\36"+
    "\2\0\1\36\1\247\25\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\15\36\1\250\11\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\5\36\1\251\21\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\22\36"+
    "\1\252\4\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\15\36\1\253\11\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\5\36\1\254\21\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\5\36\1\255\21\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\20\36"+
    "\1\256\6\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\13\36\1\257\13\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\11\36\1\260\15\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\20\36\1\261\6\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\15\36"+
    "\1\262\11\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\11\36\1\263\15\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\22\36\1\264\4\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\5\36\1\265\21\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\16\36"+
    "\1\266\10\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\20\36\1\267\6\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\23\36\1\270\3\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\5\36\1\271\21\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\1\36"+
    "\1\272\25\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\20\36\1\273\6\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\4\36\1\274\22\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\22\36\1\275\4\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\1\36"+
    "\1\276\25\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\11\36\1\277\15\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\5\36\1\300\21\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\11\36\1\301\15\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\5\36"+
    "\1\302\21\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\1\36\1\303\25\36\3\0\1\101\21\0\1\31"+
    "\5\0\11\31\2\0\11\31\1\304\15\31\3\0\1\76"+
    "\21\0\1\36\5\0\11\36\2\0\15\36\1\305\11\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\1\36"+
    "\1\306\25\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\20\36\1\307\6\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\16\36\1\310\10\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\14\36\1\311\12\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\23\36"+
    "\1\312\3\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\24\36\1\313\2\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\15\36\1\314\11\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\16\36\1\315\10\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\3\36"+
    "\1\316\23\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\2\36\1\317\24\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\11\36\1\320\15\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\15\36\1\321\11\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\11\36"+
    "\1\322\15\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\14\36\1\323\12\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\15\36\1\324\11\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\11\36\1\325\15\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\16\36"+
    "\1\326\10\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\20\36\1\327\6\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\4\36\1\330\22\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\5\36\1\331\21\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\7\36"+
    "\1\332\17\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\3\36\1\333\23\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\15\36\1\334\11\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\4\36\1\335\22\36"+
    "\3\0\1\101\21\0\1\31\5\0\11\31\2\0\17\31"+
    "\1\336\7\31\3\0\1\76\21\0\1\36\5\0\11\36"+
    "\2\0\16\36\1\337\10\36\3\0\1\101\21\0\1\36"+
    "\5\0\1\340\10\36\2\0\27\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\23\36\1\341\3\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\5\36\1\342"+
    "\21\36\3\0\1\101\21\0\1\36\5\0\11\36\2\0"+
    "\3\36\1\343\23\36\3\0\1\101\21\0\1\36\5\0"+
    "\11\36\2\0\5\36\1\344\21\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\1\36\1\345\25\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\5\36\1\346"+
    "\21\36\3\0\1\101\21\0\1\36\5\0\11\36\2\0"+
    "\11\36\1\347\15\36\3\0\1\101\21\0\1\36\5\0"+
    "\11\36\2\0\3\36\1\350\23\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\4\36\1\351\22\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\20\36\1\352"+
    "\6\36\3\0\1\101\21\0\1\36\5\0\11\36\2\0"+
    "\5\36\1\353\21\36\3\0\1\101\21\0\1\36\5\0"+
    "\11\36\2\0\3\36\1\354\23\36\3\0\1\101\21\0"+
    "\1\36\5\0\11\36\2\0\22\36\1\355\4\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\21\36\1\356"+
    "\5\36\3\0\1\101\21\0\1\36\5\0\11\36\2\0"+
    "\1\36\1\357\25\36\3\0\1\101\21\0\1\36\5\0"+
    "\11\36\2\0\1\36\1\360\14\36\1\361\10\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\4\36\1\362"+
    "\22\36\3\0\1\101\21\0\1\36\5\0\11\36\2\0"+
    "\11\36\1\363\15\36\3\0\1\101\21\0\1\36\5\0"+
    "\11\36\2\0\1\36\1\364\14\36\1\365\10\36\3\0"+
    "\1\101\21\0\1\36\5\0\11\36\2\0\22\36\1\366"+
    "\4\36\3\0\1\101\21\0\1\36\5\0\11\36\2\0"+
    "\5\36\1\367\21\36\3\0\1\101\21\0\1\31\5\0"+
    "\11\31\2\0\1\31\1\370\25\31\3\0\1\76\21\0"+
    "\1\36\5\0\1\36\1\371\2\36\1\372\3\36\1\373"+
    "\2\0\27\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\3\36\1\374\23\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\15\36\1\375\11\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\22\36\1\376\4\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\20\36"+
    "\1\377\6\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\20\36\1\u0100\6\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\21\36\1\u0101\5\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\20\36\1\u0102\6\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\16\36"+
    "\1\u0103\10\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\5\36\1\u0104\21\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\15\36\1\u0105\11\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\11\36\1\u0106\15\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\14\36"+
    "\1\u0107\12\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\21\36\1\u0108\5\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\21\36\1\u0109\5\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\21\36\1\u010a\5\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\1\36"+
    "\1\u010b\25\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\4\36\1\u010c\22\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\21\36\1\u010d\5\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\21\36\1\u010e\5\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\5\36"+
    "\1\u010f\21\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\20\36\1\u0110\6\36\3\0\1\101\21\0\1\31"+
    "\5\0\11\31\2\0\13\31\1\u0111\13\31\3\0\1\76"+
    "\21\0\1\36\5\0\11\36\2\0\16\36\1\u0112\10\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\15\36"+
    "\1\u0113\11\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\5\36\1\u0114\21\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\22\36\1\u0115\4\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\22\36\1\u0116\4\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\16\36"+
    "\1\u0117\10\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\22\36\1\u0118\4\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\1\36\1\u0119\25\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\16\36\1\u011a\10\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\4\36"+
    "\1\u011b\22\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\1\36\1\u011c\14\36\1\u011d\10\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\16\36\1\u011e\10\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\13\36"+
    "\1\u011f\13\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\22\36\1\u0120\4\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\1\36\1\u0121\25\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\16\36\1\u0122\10\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\1\36"+
    "\1\u0123\25\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\20\36\1\u0124\6\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\1\36\1\u0125\25\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\20\36\1\u0126\6\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\5\36"+
    "\1\u0127\21\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\21\36\1\u0128\5\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\21\36\1\u0129\5\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\5\36\1\u012a\21\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\5\36"+
    "\1\u012b\21\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\13\36\1\u012c\13\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\20\36\1\u012d\6\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\20\36\1\u012e\6\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\20\36"+
    "\1\u012f\6\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\21\36\1\u0130\5\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\1\36\1\u0131\25\36\3\0\1\101"+
    "\21\0\1\36\5\0\11\36\2\0\20\36\1\u0132\6\36"+
    "\3\0\1\101\21\0\1\36\5\0\11\36\2\0\15\36"+
    "\1\u0133\11\36\3\0\1\101\21\0\1\36\5\0\11\36"+
    "\2\0\16\36\1\u0134\10\36\3\0\1\101\21\0\1\36"+
    "\5\0\11\36\2\0\16\36\1\u0135\10\36\3\0\1\101"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14701];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\11\3\1\4\11\1\1\1\11\1\1\1\11"+
    "\2\1\2\11\7\1\2\11\20\1\2\11\1\1\1\11"+
    "\1\0\1\1\2\11\1\0\2\1\1\0\3\11\1\1"+
    "\1\0\2\1\1\0\31\1\2\0\1\11\42\1\1\0"+
    "\1\11\264\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[309];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

    private void writeLex(String lex) throws IOException {
        BufferedWriter writer = new BufferedWriter(new FileWriter("salida.txt", true));
        writer.append(lex + "\n");
        writer.close();
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicoSolo(java.io.Reader in) throws IOException {
      File file = new File("salida.txt");
    if (file.createNewFile()) {
        System.out.println("File created: " + file.getName());
    } else {
        file.delete();
        file.createNewFile();
    }
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { String lex = "ERROR: Palabra o simbolo no reconocido: '" + yytext() + "' en linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            }
            // fall through
          case 81: break;
          case 2:
            { 
            }
            // fall through
          case 82: break;
          case 3:
            { String lex = "Fin de linea encontrado - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1)
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.FINLINEA);
            }
            // fall through
          case 83: break;
          case 4:
            { System.out.print(yytext());
            }
            // fall through
          case 84: break;
          case 5:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: MODULO - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.MODULO);
            }
            // fall through
          case 85: break;
          case 6:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: INICIOPARENTESIS - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.INICIOPARENTESIS);
            }
            // fall through
          case 86: break;
          case 7:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: FINALPARENTESIS - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.FINALPARENTESIS);
            }
            // fall through
          case 87: break;
          case 8:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: MULTIPLICACION - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.MULTIPLICACION);
            }
            // fall through
          case 88: break;
          case 9:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: SUMA - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.SUMA);
            }
            // fall through
          case 89: break;
          case 10:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: COMA - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.COMA);
            }
            // fall through
          case 90: break;
          case 11:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: RESTA - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.RESTA);
            }
            // fall through
          case 91: break;
          case 12:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: PUNTO - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.PUNTO);
            }
            // fall through
          case 92: break;
          case 13:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: DIVISION - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.DIVISION);
            }
            // fall through
          case 93: break;
          case 14:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: NUMEROS - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.NUMEROS);
            }
            // fall through
          case 94: break;
          case 15:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: DOSPUNTOS - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.DOSPUNTOS);
            }
            // fall through
          case 95: break;
          case 16:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: PUNTOYCOMA - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.PUNTOYCOMA);
            }
            // fall through
          case 96: break;
          case 17:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: MENOR - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.MENOR);
            }
            // fall through
          case 97: break;
          case 18:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: IGUAL - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.IGUAL);
            }
            // fall through
          case 98: break;
          case 19:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: Mayor - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.MAYOR);
            }
            // fall through
          case 99: break;
          case 20:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: VARIABLECLASE - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.VARIABLECLASE);
            }
            // fall through
          case 100: break;
          case 21:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: INICIOCORCHETE - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.INICIOCORCHETE);
            }
            // fall through
          case 101: break;
          case 22:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: FINALCORCHETE - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.FINALCORCHETE);
            }
            // fall through
          case 102: break;
          case 23:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: VARIABLE - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.VARIABLE);
            }
            // fall through
          case 103: break;
          case 24:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: INICIOLLAVE - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.INICIOLLAVE);
            }
            // fall through
          case 104: break;
          case 25:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: FINALLLAVE - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.FINALLLAVE);
            }
            // fall through
          case 105: break;
          case 26:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: DISTINTO - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.DISTINTO);
            }
            // fall through
          case 106: break;
          case 27:
            { String lex = "Cadena de texto (string) " + yytext() + " - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            }
            // fall through
          case 107: break;
          case 28:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: INCREMENTO - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.INCREMENTO);
            }
            // fall through
          case 108: break;
          case 29:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: DECREMENTO - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.DECREMENTO);
            }
            // fall through
          case 109: break;
          case 30:
            { String lex = "Comentario - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            }
            // fall through
          case 110: break;
          case 31:
            { String lex = "ERROR: Variable mal escrita: '" + yytext() + "' - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1)
            System.out.println(lex);
            writeLex(lex);
            }
            // fall through
          case 111: break;
          case 32:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: MAYOROIGUAL - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.MAYOROIGUAL);
            }
            // fall through
          case 112: break;
          case 33:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: IGUALQUE - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.IGUALQUE);
            }
            // fall through
          case 113: break;
          case 34:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: MENOROIGUAL - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.MENOROIGUAL);
            }
            // fall through
          case 114: break;
          case 35:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: OR - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.OR);
            }
            // fall through
          case 115: break;
          case 36:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: SI - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.SI);
            }
            // fall through
          case 116: break;
          case 37:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: AND - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.AND);
            }
            // fall through
          case 117: break;
          case 38:
            { String lex = "Comentario de varias lineas - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            }
            // fall through
          case 118: break;
          case 39:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: LEER - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.LEER);
            }
            // fall through
          case 119: break;
          case 40:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: NULO - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.NULO);
            }
            // fall through
          case 120: break;
          case 41:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: RAIZ - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.RAIZ);
            }
            // fall through
          case 121: break;
          case 42:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: REAL - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.REAL);
            }
            // fall through
          case 122: break;
          case 43:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: SENO - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.SENO);
            }
            // fall through
          case 123: break;
          case 44:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: SINO - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.SINO);
            }
            // fall through
          case 124: break;
          case 45:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: CLASE - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.CLASE);
            }
            // fall through
          case 125: break;
          case 46:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: DESDE - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.DESDE);
            }
            // fall through
          case 126: break;
          case 47:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: FALSO - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.FALSO);
            }
            // fall through
          case 127: break;
          case 48:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: HACER - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.HACER);
            }
            // fall through
          case 128: break;
          case 49:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: CADENA - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.CADENA);
            }
            // fall through
          case 129: break;
          case 50:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: COSENO - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.COSENO);
            }
            // fall through
          case 130: break;
          case 51:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: ENTERO - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.ENTERO);
            }
            // fall through
          case 131: break;
          case 52:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: BOLEANO - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.BOLEANO);
            }
            // fall through
          case 132: break;
          case 53:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: INCLUIR - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.INCLUIR);
            }
            // fall through
          case 133: break;
          case 54:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: METODOS - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.METODOS);
            }
            // fall through
          case 134: break;
          case 55:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: DEVOLVER - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.DEVOLVER);
            }
            // fall through
          case 135: break;
          case 56:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: ELIMINAR - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.ELIMINAR);
            }
            // fall through
          case 136: break;
          case 57:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: ENTONCES - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.ENTONCES);
            }
            // fall through
          case 137: break;
          case 58:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: ESCRIBIR - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.ESCRIBIR);
            }
            // fall through
          case 138: break;
          case 59:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: ESTATICO - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.ESTATICO);
            }
            // fall through
          case 139: break;
          case 60:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: EXTIENDE - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.EXTIENDE);
            }
            // fall through
          case 140: break;
          case 61:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: MIENTRAS - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.MIENTRAS);
            }
            // fall through
          case 141: break;
          case 62:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: PRIVADAS - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.PRIVADAS);
            }
            // fall through
          case 142: break;
          case 63:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: PRIVADOS - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.PRIVADOS);
            }
            // fall through
          case 143: break;
          case 64:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: PUBLICAS - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.PUBLICAS);
            }
            // fall through
          case 144: break;
          case 65:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: PUBLICOS - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.PUBLICOS);
            }
            // fall through
          case 145: break;
          case 66:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: TANGENTE - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.TANGENTE);
            }
            // fall through
          case 146: break;
          case 67:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: PRINCIPAL - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.PRINCIPAL);
            }
            // fall through
          case 147: break;
          case 68:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: LOGARITMO - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.LOGARITMO);
            }
            // fall through
          case 148: break;
          case 69:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: VERDADERO - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.VERDADERO);
            }
            // fall through
          case 149: break;
          case 70:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: DESTRUCTOR - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.DESTRUCTOR);
            }
            // fall through
          case 150: break;
          case 71:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: INSTANCIAR - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.INSTANCIAR);
            }
            // fall through
          case 151: break;
          case 72:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: PROTEGIDAS - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.PROTEGIDAS);
            }
            // fall through
          case 152: break;
          case 73:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: PROTEGIDOS - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.PROTEGIDOS);
            }
            // fall through
          case 153: break;
          case 74:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: CADENA_REAL - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.CADENA_REAL);
            }
            // fall through
          case 154: break;
          case 75:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: CONSTRUCTOR - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.CONSTRUCTOR);
            }
            // fall through
          case 155: break;
          case 76:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: DECREMENTAR - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.DECREMENTAR);
            }
            // fall through
          case 156: break;
          case 77:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: INCREMENTAR - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.INCREMENTAR);
            }
            // fall through
          case 157: break;
          case 78:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: PROPIEDADES - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.PROPIEDADES);
            }
            // fall through
          case 158: break;
          case 79:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: CADENA_ENTERO - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.CADENA_ENTERO);
            }
            // fall through
          case 159: break;
          case 80:
            { String lex = "Palabra encontrada: '" + yytext() + "' coincide con lexema: CADENA_BOLEANO - Linea " + (yyline+1) + " | Columna: " + (yycolumn+1);
            System.out.println(lex);
            writeLex(lex);
            // return new Symbol(sym.CADENA_BOLEANO);
            }
            // fall through
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexicoSolo [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexicoSolo scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexicoSolo(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
