
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.prueba1;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\002\002\004\000\002\016\003\000\002\016" +
    "\003\000\002\037\006\000\002\037\007\000\002\037\007" +
    "\000\002\037\007\000\002\037\010\000\002\037\010\000" +
    "\002\037\010\000\002\037\010\000\002\037\011\000\002" +
    "\037\010\000\002\037\011\000\002\037\011\000\002\037" +
    "\011\000\002\037\011\000\002\037\011\000\002\037\011" +
    "\000\002\037\012\000\002\037\012\000\002\037\012\000" +
    "\002\037\011\000\002\037\012\000\002\037\012\000\002" +
    "\037\012\000\002\037\012\000\002\037\012\000\002\037" +
    "\012\000\002\037\012\000\002\037\012\000\002\037\012" +
    "\000\002\037\013\000\002\037\013\000\002\037\013\000" +
    "\002\037\012\000\002\037\013\000\002\037\013\000\002" +
    "\037\013\000\002\037\013\000\002\037\013\000\002\037" +
    "\013\000\002\037\013\000\002\037\013\000\002\037\013" +
    "\000\002\037\014\000\002\037\014\000\002\037\014\000" +
    "\002\037\014\000\002\010\006\000\002\010\006\000\002" +
    "\010\006\000\002\010\006\000\002\010\007\000\002\010" +
    "\007\000\002\010\007\000\002\010\007\000\002\010\010" +
    "\000\002\010\010\000\002\010\010\000\002\010\010\000" +
    "\002\010\010\000\002\010\010\000\002\010\010\000\002" +
    "\010\011\000\002\010\011\000\002\010\011\000\002\010" +
    "\011\000\002\010\011\000\002\010\011\000\002\010\011" +
    "\000\002\010\011\000\002\010\012\000\002\010\012\000" +
    "\002\010\012\000\002\010\012\000\002\010\012\000\002" +
    "\010\012\000\002\010\012\000\002\010\012\000\002\010" +
    "\013\000\002\010\013\000\002\010\013\000\002\010\013" +
    "\000\002\010\013\000\002\010\013\000\002\010\013\000" +
    "\002\010\013\000\002\010\013\000\002\010\014\000\002" +
    "\010\014\000\002\010\014\000\002\010\014\000\002\010" +
    "\014\000\002\010\015\000\002\010\015\000\002\010\015" +
    "\000\002\010\015\000\002\010\015\000\002\034\007\000" +
    "\002\034\007\000\002\034\007\000\002\034\007\000\002" +
    "\034\010\000\002\034\010\000\002\034\010\000\002\034" +
    "\010\000\002\034\011\000\002\034\011\000\002\034\010" +
    "\000\002\034\011\000\002\034\011\000\002\034\010\000" +
    "\002\034\010\000\002\034\010\000\002\034\011\000\002" +
    "\034\011\000\002\034\011\000\002\034\011\000\002\034" +
    "\012\000\002\034\012\000\002\034\012\000\002\034\012" +
    "\000\002\033\010\000\002\033\011\000\002\033\011\000" +
    "\002\033\012\000\002\033\014\000\002\033\015\000\002" +
    "\033\015\000\002\033\016\000\002\022\004\000\002\022" +
    "\004\000\002\022\004\000\002\022\004\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\006\000\002\022\006\000\002\022" +
    "\006\000\002\022\006\000\002\022\006\000\002\022\006" +
    "\000\002\022\006\000\002\022\006\000\002\022\007\000" +
    "\002\022\007\000\002\022\007\000\002\022\007\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\006\000\002" +
    "\025\006\000\002\025\006\000\002\025\006\000\002\025" +
    "\007\000\002\025\007\000\002\025\007\000\002\025\007" +
    "\000\002\023\004\000\002\023\006\000\002\023\006\000" +
    "\002\023\006\000\002\023\006\000\002\023\007\000\002" +
    "\023\007\000\002\023\007\000\002\023\007\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\006\000\002\007\006\000\002\007\006\000\002\007\006" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\006\000\002\035\006\000\002" +
    "\035\006\000\002\035\006\000\002\006\003\000\002\006" +
    "\005\000\002\006\005\000\002\006\007\000\002\005\003" +
    "\000\002\005\005\000\002\005\005\000\002\005\007\000" +
    "\002\003\003\000\002\003\005\000\002\003\005\000\002" +
    "\003\007\000\002\004\003\000\002\004\005\000\002\004" +
    "\005\000\002\004\007\000\002\017\003\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\004\000\002\020" +
    "\004\000\002\020\004\000\002\021\004\000\002\021\005" +
    "\000\002\021\006\000\002\011\003\000\002\011\005\000" +
    "\002\012\003\000\002\012\005\000\002\013\003\000\002" +
    "\013\005\000\002\014\003\000\002\014\005\000\002\015" +
    "\003\000\002\015\005\000\002\026\003\000\002\026\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01bc\000\034\043\032\044\004\045\027\046\031\047" +
    "\025\050\022\054\010\055\023\057\020\060\017\061\016" +
    "\062\005\077\024\001\002\000\004\077\u01be\001\002\000" +
    "\004\064\u01af\001\002\000\004\002\u01ae\001\002\000\004" +
    "\002\uff5f\001\002\000\004\077\u01ab\001\002\000\004\002" +
    "\uff60\001\002\000\016\002\uff65\050\uff65\052\uff65\053\uff65" +
    "\061\uff65\062\uff65\001\002\000\004\002\uff61\001\002\000" +
    "\016\002\uff62\050\uff62\052\uff62\053\uff62\061\uff62\062\uff62" +
    "\001\002\000\016\002\uff66\050\uff66\052\uff66\053\uff66\061" +
    "\uff66\062\uff66\001\002\000\004\063\u019c\001\002\000\004" +
    "\077\u0194\001\002\000\004\077\u018e\001\002\000\004\002" +
    "\uffff\001\002\000\004\077\u016a\001\002\000\016\033\u0149" +
    "\034\u0146\075\064\076\070\077\065\100\u0147\001\002\000" +
    "\006\013\u0137\031\315\001\002\000\004\077\u0136\001\002" +
    "\000\016\002\uff63\050\uff63\052\uff63\053\uff63\061\uff63\062" +
    "\uff63\001\002\000\004\077\u012b\001\002\000\004\002\000" +
    "\001\002\000\004\077\u012a\001\002\000\004\077\035\001" +
    "\002\000\016\002\uff64\050\uff64\052\uff64\053\uff64\061\uff64" +
    "\062\uff64\001\002\000\020\002\uff44\004\u0106\050\uff44\052" +
    "\uff44\053\uff44\061\uff44\062\uff44\001\002\000\016\002\uff2c" +
    "\004\uff2c\013\037\025\041\031\040\037\036\001\002\000" +
    "\004\077\u0104\001\002\000\004\076\u0101\001\002\000\006" +
    "\032\215\075\214\001\002\000\014\026\043\043\042\044" +
    "\047\046\046\047\045\001\002\000\004\077\211\001\002" +
    "\000\004\004\203\001\002\000\004\026\061\001\002\000" +
    "\004\077\056\001\002\000\004\077\053\001\002\000\004" +
    "\077\050\001\002\000\006\026\uff37\037\051\001\002\000" +
    "\012\043\042\044\047\046\046\047\045\001\002\000\004" +
    "\026\uff33\001\002\000\006\026\uff36\037\054\001\002\000" +
    "\012\043\042\044\047\046\046\047\045\001\002\000\004" +
    "\026\uff32\001\002\000\006\026\uff35\037\057\001\002\000" +
    "\012\043\042\044\047\046\046\047\045\001\002\000\004" +
    "\026\uff31\001\002\000\004\004\062\001\002\000\004\071" +
    "\063\001\002\000\010\075\064\076\070\077\065\001\002" +
    "\000\060\002\uff19\004\uff19\014\uff19\015\uff19\016\uff19\017" +
    "\uff19\020\uff19\040\uff19\043\uff19\044\uff19\045\uff19\046\uff19" +
    "\047\uff19\050\uff19\052\uff19\053\uff19\057\uff19\060\uff19\061" +
    "\uff19\062\uff19\075\064\076\070\077\065\001\002\000\060" +
    "\002\uff17\004\uff17\014\uff17\015\uff17\016\uff17\017\uff17\020" +
    "\uff17\040\uff17\043\uff17\044\uff17\045\uff17\046\uff17\047\uff17" +
    "\050\uff17\052\uff17\053\uff17\057\uff17\060\uff17\061\uff17\062" +
    "\uff17\075\064\076\070\077\065\001\002\000\052\002\uff20" +
    "\004\uff20\014\uff20\015\uff20\016\uff20\017\uff20\020\uff20\040" +
    "\uff20\043\uff20\044\uff20\045\uff20\046\uff20\047\uff20\050\uff20" +
    "\052\uff20\053\uff20\057\uff20\060\uff20\061\uff20\062\uff20\001" +
    "\002\000\040\002\uffe8\004\111\014\075\015\072\016\073" +
    "\017\077\020\074\040\076\043\112\044\106\045\027\046" +
    "\110\047\113\057\020\060\017\001\002\000\060\002\uff18" +
    "\004\uff18\014\uff18\015\uff18\016\uff18\017\uff18\020\uff18\040" +
    "\uff18\043\uff18\044\uff18\045\uff18\046\uff18\047\uff18\050\uff18" +
    "\052\uff18\053\uff18\057\uff18\060\uff18\061\uff18\062\uff18\075" +
    "\064\076\070\077\065\001\002\000\052\002\uff15\004\uff15" +
    "\014\075\015\072\016\073\017\077\020\074\040\076\043" +
    "\uff15\044\uff15\045\uff15\046\uff15\047\uff15\050\uff15\052\uff15" +
    "\053\uff15\057\uff15\060\uff15\061\uff15\062\uff15\001\002\000" +
    "\010\075\064\076\070\077\065\001\002\000\010\075\064" +
    "\076\070\077\065\001\002\000\010\075\064\076\070\077" +
    "\065\001\002\000\010\075\064\076\070\077\065\001\002" +
    "\000\010\075\064\076\070\077\065\001\002\000\010\075" +
    "\064\076\070\077\065\001\002\000\052\002\uff1c\004\uff1c" +
    "\014\075\015\072\016\073\017\077\020\074\040\076\043" +
    "\uff1c\044\uff1c\045\uff1c\046\uff1c\047\uff1c\050\uff1c\052\uff1c" +
    "\053\uff1c\057\uff1c\060\uff1c\061\uff1c\062\uff1c\001\002\000" +
    "\052\002\uff1b\004\uff1b\014\075\015\072\016\073\017\077" +
    "\020\074\040\076\043\uff1b\044\uff1b\045\uff1b\046\uff1b\047" +
    "\uff1b\050\uff1b\052\uff1b\053\uff1b\057\uff1b\060\uff1b\061\uff1b" +
    "\062\uff1b\001\002\000\052\002\uff1e\004\uff1e\014\075\015" +
    "\072\016\073\017\077\020\074\040\076\043\uff1e\044\uff1e" +
    "\045\uff1e\046\uff1e\047\uff1e\050\uff1e\052\uff1e\053\uff1e\057" +
    "\uff1e\060\uff1e\061\uff1e\062\uff1e\001\002\000\052\002\uff1f" +
    "\004\uff1f\014\075\015\072\016\073\017\077\020\074\040" +
    "\076\043\uff1f\044\uff1f\045\uff1f\046\uff1f\047\uff1f\050\uff1f" +
    "\052\uff1f\053\uff1f\057\uff1f\060\uff1f\061\uff1f\062\uff1f\001" +
    "\002\000\052\002\uff1a\004\uff1a\014\075\015\072\016\073" +
    "\017\077\020\074\040\076\043\uff1a\044\uff1a\045\uff1a\046" +
    "\uff1a\047\uff1a\050\uff1a\052\uff1a\053\uff1a\057\uff1a\060\uff1a" +
    "\061\uff1a\062\uff1a\001\002\000\052\002\uff1d\004\uff1d\014" +
    "\075\015\072\016\073\017\077\020\074\040\076\043\uff1d" +
    "\044\uff1d\045\uff1d\046\uff1d\047\uff1d\050\uff1d\052\uff1d\053" +
    "\uff1d\057\uff1d\060\uff1d\061\uff1d\062\uff1d\001\002\000\004" +
    "\077\160\001\002\000\004\002\uffdd\001\002\000\004\077" +
    "\137\001\002\000\022\002\uffdf\043\112\044\106\045\027" +
    "\046\110\047\113\057\020\060\017\001\002\000\004\077" +
    "\135\001\002\000\004\077\114\001\002\000\004\025\115" +
    "\001\002\000\014\026\116\043\042\044\047\046\046\047" +
    "\045\001\002\000\004\004\127\001\002\000\004\026\120" +
    "\001\002\000\004\004\121\001\002\000\004\071\122\001" +
    "\002\000\004\035\123\001\002\000\024\002\uffe2\004\125" +
    "\043\112\044\106\045\027\046\110\047\113\057\020\060" +
    "\017\001\002\000\004\002\uffd5\001\002\000\022\002\uffd7" +
    "\043\112\044\106\045\027\046\110\047\113\057\020\060" +
    "\017\001\002\000\004\002\uffd1\001\002\000\004\071\130" +
    "\001\002\000\004\035\131\001\002\000\024\002\ufff1\004" +
    "\133\043\112\044\106\045\027\046\110\047\113\057\020" +
    "\060\017\001\002\000\004\002\uffe4\001\002\000\022\002" +
    "\uffe6\043\112\044\106\045\027\046\110\047\113\057\020" +
    "\060\017\001\002\000\004\002\uffd9\001\002\000\004\025" +
    "\041\001\002\000\004\002\uffd4\001\002\000\004\025\140" +
    "\001\002\000\014\026\141\043\042\044\047\046\046\047" +
    "\045\001\002\000\004\004\152\001\002\000\004\026\143" +
    "\001\002\000\004\004\144\001\002\000\004\071\145\001" +
    "\002\000\010\075\064\076\070\077\065\001\002\000\040" +
    "\002\uffe3\004\150\014\075\015\072\016\073\017\077\020" +
    "\074\040\076\043\112\044\106\045\027\046\110\047\113" +
    "\057\020\060\017\001\002\000\004\002\uffd6\001\002\000" +
    "\022\002\uffda\043\112\044\106\045\027\046\110\047\113" +
    "\057\020\060\017\001\002\000\004\002\uffd2\001\002\000" +
    "\004\071\153\001\002\000\010\075\064\076\070\077\065" +
    "\001\002\000\040\002\ufff2\004\156\014\075\015\072\016" +
    "\073\017\077\020\074\040\076\043\112\044\106\045\027" +
    "\046\110\047\113\057\020\060\017\001\002\000\004\002" +
    "\uffe5\001\002\000\022\002\uffe9\043\112\044\106\045\027" +
    "\046\110\047\113\057\020\060\017\001\002\000\004\002" +
    "\uffdb\001\002\000\004\025\161\001\002\000\014\026\162" +
    "\043\042\044\047\046\046\047\045\001\002\000\004\004" +
    "\173\001\002\000\004\026\164\001\002\000\004\004\165" +
    "\001\002\000\004\071\166\001\002\000\004\100\167\001" +
    "\002\000\024\002\uffe7\004\171\043\112\044\106\045\027" +
    "\046\110\047\113\057\020\060\017\001\002\000\004\002" +
    "\uffd8\001\002\000\022\002\uffdc\043\112\044\106\045\027" +
    "\046\110\047\113\057\020\060\017\001\002\000\004\002" +
    "\uffd3\001\002\000\004\071\174\001\002\000\004\100\175" +
    "\001\002\000\024\002\ufff4\004\177\043\112\044\106\045" +
    "\027\046\110\047\113\057\020\060\017\001\002\000\004" +
    "\002\uffea\001\002\000\022\002\uffec\043\112\044\106\045" +
    "\027\046\110\047\113\057\020\060\017\001\002\000\004" +
    "\002\uffe0\001\002\000\052\002\uff14\004\uff14\014\075\015" +
    "\072\016\073\017\077\020\074\040\076\043\uff14\044\uff14" +
    "\045\uff14\046\uff14\047\uff14\050\uff14\052\uff14\053\uff14\057" +
    "\uff14\060\uff14\061\uff14\062\uff14\001\002\000\052\002\uff16" +
    "\004\uff16\014\075\015\072\016\073\017\077\020\074\040" +
    "\076\043\uff16\044\uff16\045\uff16\046\uff16\047\uff16\050\uff16" +
    "\052\uff16\053\uff16\057\uff16\060\uff16\061\uff16\062\uff16\001" +
    "\002\000\004\071\204\001\002\000\010\075\064\076\070" +
    "\077\065\001\002\000\040\002\ufff6\004\207\014\075\015" +
    "\072\016\073\017\077\020\074\040\076\043\112\044\106" +
    "\045\027\046\110\047\113\057\020\060\017\001\002\000" +
    "\004\002\uffed\001\002\000\022\002\uffee\043\112\044\106" +
    "\045\027\046\110\047\113\057\020\060\017\001\002\000" +
    "\004\002\uffe1\001\002\000\006\026\uff38\037\212\001\002" +
    "\000\012\043\042\044\047\046\046\047\045\001\002\000" +
    "\004\026\uff34\001\002\000\004\032\367\001\002\000\020" +
    "\002\uffd0\004\216\050\uffd0\052\uffd0\053\uffd0\061\uffd0\062" +
    "\uffd0\001\002\000\030\002\uffcc\043\217\044\224\046\223" +
    "\047\221\050\uffcc\052\uffcc\053\uffcc\061\uffcc\062\uffcc\077" +
    "\220\001\002\000\004\077\366\001\002\000\006\013\314" +
    "\031\315\001\002\000\004\077\265\001\002\000\016\002" +
    "\uffc5\050\uffc5\052\uffc5\053\uffc5\061\uffc5\062\uffc5\001\002" +
    "\000\004\077\245\001\002\000\004\077\225\001\002\000" +
    "\004\031\226\001\002\000\006\032\230\075\227\001\002" +
    "\000\004\032\233\001\002\000\020\002\uffcf\004\231\050" +
    "\uffcf\052\uffcf\053\uffcf\061\uffcf\062\uffcf\001\002\000\030" +
    "\002\uffcb\043\217\044\224\046\223\047\221\050\uffcb\052" +
    "\uffcb\053\uffcb\061\uffcb\062\uffcb\077\220\001\002\000\016" +
    "\002\uffc4\050\uffc4\052\uffc4\053\uffc4\061\uffc4\062\uffc4\001" +
    "\002\000\004\013\234\001\002\000\004\027\235\001\002" +
    "\000\004\100\236\001\002\000\006\030\uff0c\037\243\001" +
    "\002\000\004\030\240\001\002\000\020\002\uffb0\004\241" +
    "\050\uffb0\052\uffb0\053\uffb0\061\uffb0\062\uffb0\001\002\000" +
    "\030\002\uffa7\043\217\044\224\046\223\047\221\050\uffa7" +
    "\052\uffa7\053\uffa7\061\uffa7\062\uffa7\077\220\001\002\000" +
    "\016\002\uffa2\050\uffa2\052\uffa2\053\uffa2\061\uffa2\062\uffa2" +
    "\001\002\000\004\100\236\001\002\000\004\030\uff0b\001" +
    "\002\000\004\031\246\001\002\000\006\032\250\075\247" +
    "\001\002\000\004\032\253\001\002\000\020\002\uffce\004" +
    "\251\050\uffce\052\uffce\053\uffce\061\uffce\062\uffce\001\002" +
    "\000\030\002\uffca\043\217\044\224\046\223\047\221\050" +
    "\uffca\052\uffca\053\uffca\061\uffca\062\uffca\077\220\001\002" +
    "\000\016\002\uffc3\050\uffc3\052\uffc3\053\uffc3\061\uffc3\062" +
    "\uffc3\001\002\000\004\013\254\001\002\000\004\027\255" +
    "\001\002\000\004\046\257\001\002\000\004\030\262\001" +
    "\002\000\006\030\uff0e\037\260\001\002\000\004\046\257" +
    "\001\002\000\004\030\uff0d\001\002\000\020\002\uffaf\004" +
    "\263\050\uffaf\052\uffaf\053\uffaf\061\uffaf\062\uffaf\001\002" +
    "\000\030\002\uffa6\043\217\044\224\046\223\047\221\050" +
    "\uffa6\052\uffa6\053\uffa6\061\uffa6\062\uffa6\077\220\001\002" +
    "\000\016\002\uffa1\050\uffa1\052\uffa1\053\uffa1\061\uffa1\062" +
    "\uffa1\001\002\000\004\031\266\001\002\000\006\032\270" +
    "\075\267\001\002\000\004\032\273\001\002\000\020\002" +
    "\uffcd\004\271\050\uffcd\052\uffcd\053\uffcd\061\uffcd\062\uffcd" +
    "\001\002\000\030\002\uffc9\043\217\044\224\046\223\047" +
    "\221\050\uffc9\052\uffc9\053\uffc9\061\uffc9\062\uffc9\077\220" +
    "\001\002\000\016\002\uffc2\050\uffc2\052\uffc2\053\uffc2\061" +
    "\uffc2\062\uffc2\001\002\000\004\013\274\001\002\000\004" +
    "\027\275\001\002\000\006\033\300\034\277\001\002\000" +
    "\004\030\311\001\002\000\006\030\uff08\037\307\001\002" +
    "\000\006\030\uff0a\037\305\001\002\000\004\030\302\001" +
    "\002\000\020\002\uffae\004\303\050\uffae\052\uffae\053\uffae" +
    "\061\uffae\062\uffae\001\002\000\030\002\uffa5\043\217\044" +
    "\224\046\223\047\221\050\uffa5\052\uffa5\053\uffa5\061\uffa5" +
    "\062\uffa5\077\220\001\002\000\016\002\uffa0\050\uffa0\052" +
    "\uffa0\053\uffa0\061\uffa0\062\uffa0\001\002\000\004\033\300" +
    "\001\002\000\004\030\uff09\001\002\000\004\034\277\001" +
    "\002\000\004\030\uff07\001\002\000\020\002\uffad\004\312" +
    "\050\uffad\052\uffad\053\uffad\061\uffad\062\uffad\001\002\000" +
    "\030\002\uffa4\043\217\044\224\046\223\047\221\050\uffa4" +
    "\052\uffa4\053\uffa4\061\uffa4\062\uffa4\077\220\001\002\000" +
    "\016\002\uff9f\050\uff9f\052\uff9f\053\uff9f\061\uff9f\062\uff9f" +
    "\001\002\000\004\067\335\001\002\000\004\075\316\001" +
    "\002\000\004\032\317\001\002\000\004\013\320\001\002" +
    "\000\012\035\322\075\321\076\324\100\323\001\002\000" +
    "\004\004\333\001\002\000\020\002\uffc6\004\331\050\uffc6" +
    "\052\uffc6\053\uffc6\061\uffc6\062\uffc6\001\002\000\020\002" +
    "\uffc7\004\327\050\uffc7\052\uffc7\053\uffc7\061\uffc7\062\uffc7" +
    "\001\002\000\020\002\uffc8\004\325\050\uffc8\052\uffc8\053" +
    "\uffc8\061\uffc8\062\uffc8\001\002\000\030\002\uffbf\043\217" +
    "\044\224\046\223\047\221\050\uffbf\052\uffbf\053\uffbf\061" +
    "\uffbf\062\uffbf\077\220\001\002\000\016\002\uffb7\050\uffb7" +
    "\052\uffb7\053\uffb7\061\uffb7\062\uffb7\001\002\000\030\002" +
    "\uffbb\043\217\044\224\046\223\047\221\050\uffbb\052\uffbb" +
    "\053\uffbb\061\uffbb\062\uffbb\077\220\001\002\000\016\002" +
    "\uffb6\050\uffb6\052\uffb6\053\uffb6\061\uffb6\062\uffb6\001\002" +
    "\000\030\002\uffba\043\217\044\224\046\223\047\221\050" +
    "\uffba\052\uffba\053\uffba\061\uffba\062\uffba\077\220\001\002" +
    "\000\016\002\uffb3\050\uffb3\052\uffb3\053\uffb3\061\uffb3\062" +
    "\uffb3\001\002\000\030\002\uffc0\043\217\044\224\046\223" +
    "\047\221\050\uffc0\052\uffc0\053\uffc0\061\uffc0\062\uffc0\077" +
    "\220\001\002\000\016\002\uffb8\050\uffb8\052\uffb8\053\uffb8" +
    "\061\uffb8\062\uffb8\001\002\000\012\043\336\044\340\046" +
    "\341\047\337\001\002\000\004\031\361\001\002\000\004" +
    "\031\354\001\002\000\004\031\347\001\002\000\004\031" +
    "\342\001\002\000\004\075\343\001\002\000\004\032\344" +
    "\001\002\000\020\002\uffbd\004\345\050\uffbd\052\uffbd\053" +
    "\uffbd\061\uffbd\062\uffbd\001\002\000\030\002\uffb4\043\217" +
    "\044\224\046\223\047\221\050\uffb4\052\uffb4\053\uffb4\061" +
    "\uffb4\062\uffb4\077\220\001\002\000\016\002\uffaa\050\uffaa" +
    "\052\uffaa\053\uffaa\061\uffaa\062\uffaa\001\002\000\004\075" +
    "\350\001\002\000\004\032\351\001\002\000\020\002\uffbe" +
    "\004\352\050\uffbe\052\uffbe\053\uffbe\061\uffbe\062\uffbe\001" +
    "\002\000\030\002\uffb5\043\217\044\224\046\223\047\221" +
    "\050\uffb5\052\uffb5\053\uffb5\061\uffb5\062\uffb5\077\220\001" +
    "\002\000\016\002\uffab\050\uffab\052\uffab\053\uffab\061\uffab" +
    "\062\uffab\001\002\000\004\075\355\001\002\000\004\032" +
    "\356\001\002\000\020\002\uffbc\004\357\050\uffbc\052\uffbc" +
    "\053\uffbc\061\uffbc\062\uffbc\001\002\000\030\002\uffb2\043" +
    "\217\044\224\046\223\047\221\050\uffb2\052\uffb2\053\uffb2" +
    "\061\uffb2\062\uffb2\077\220\001\002\000\016\002\uffa9\050" +
    "\uffa9\052\uffa9\053\uffa9\061\uffa9\062\uffa9\001\002\000\004" +
    "\075\362\001\002\000\004\032\363\001\002\000\020\002" +
    "\uffc1\004\364\050\uffc1\052\uffc1\053\uffc1\061\uffc1\062\uffc1" +
    "\001\002\000\030\002\uffb9\043\217\044\224\046\223\047" +
    "\221\050\uffb9\052\uffb9\053\uffb9\061\uffb9\062\uffb9\077\220" +
    "\001\002\000\016\002\uffac\050\uffac\052\uffac\053\uffac\061" +
    "\uffac\062\uffac\001\002\000\004\031\040\001\002\000\004" +
    "\013\370\001\002\000\004\027\371\001\002\000\004\076" +
    "\373\001\002\000\004\030\376\001\002\000\006\030\uff10" +
    "\037\374\001\002\000\004\076\373\001\002\000\004\030" +
    "\uff0f\001\002\000\020\002\uffb1\004\377\050\uffb1\052\uffb1" +
    "\053\uffb1\061\uffb1\062\uffb1\001\002\000\030\002\uffa8\043" +
    "\217\044\224\046\223\047\221\050\uffa8\052\uffa8\053\uffa8" +
    "\061\uffa8\062\uffa8\077\220\001\002\000\016\002\uffa3\050" +
    "\uffa3\052\uffa3\053\uffa3\061\uffa3\062\uffa3\001\002\000\022" +
    "\002\uff2a\004\uff2a\037\u0102\050\uff2a\052\uff2a\053\uff2a\061" +
    "\uff2a\062\uff2a\001\002\000\004\077\u0104\001\002\000\020" +
    "\002\uff29\004\uff29\050\uff29\052\uff29\053\uff29\061\uff29\062" +
    "\uff29\001\002\000\024\002\uff2c\004\uff2c\013\037\037\036" +
    "\050\uff2c\052\uff2c\053\uff2c\061\uff2c\062\uff2c\001\002\000" +
    "\020\002\uff2b\004\uff2b\050\uff2b\052\uff2b\053\uff2b\061\uff2b" +
    "\062\uff2b\001\002\000\026\002\uff40\043\u0108\044\u010b\046" +
    "\u010a\047\u0109\050\uff40\052\uff40\053\uff40\061\uff40\062\uff40" +
    "\001\002\000\016\002\uff3c\050\uff3c\052\uff3c\053\uff3c\061" +
    "\uff3c\062\uff3c\001\002\000\004\077\u0104\001\002\000\004" +
    "\077\u0121\001\002\000\004\077\u0117\001\002\000\004\077" +
    "\u010c\001\002\000\024\002\uff28\004\uff28\013\u0111\037\u0110" +
    "\050\uff28\052\uff28\053\uff28\061\uff28\062\uff28\001\002\000" +
    "\020\002\uff43\004\u010e\050\uff43\052\uff43\053\uff43\061\uff43" +
    "\062\uff43\001\002\000\026\002\uff3f\043\u0108\044\u010b\046" +
    "\u010a\047\u0109\050\uff3f\052\uff3f\053\uff3f\061\uff3f\062\uff3f" +
    "\001\002\000\016\002\uff3b\050\uff3b\052\uff3b\053\uff3b\061" +
    "\uff3b\062\uff3b\001\002\000\004\077\u010c\001\002\000\004" +
    "\100\u0112\001\002\000\022\002\uff26\004\uff26\037\u0113\050" +
    "\uff26\052\uff26\053\uff26\061\uff26\062\uff26\001\002\000\004" +
    "\077\u010c\001\002\000\020\002\uff25\004\uff25\050\uff25\052" +
    "\uff25\053\uff25\061\uff25\062\uff25\001\002\000\020\002\uff27" +
    "\004\uff27\050\uff27\052\uff27\053\uff27\061\uff27\062\uff27\001" +
    "\002\000\020\002\uff42\004\u011e\050\uff42\052\uff42\053\uff42" +
    "\061\uff42\062\uff42\001\002\000\024\002\uff24\004\uff24\013" +
    "\u0118\037\u0119\050\uff24\052\uff24\053\uff24\061\uff24\062\uff24" +
    "\001\002\000\004\075\u011b\001\002\000\004\077\u0117\001" +
    "\002\000\020\002\uff23\004\uff23\050\uff23\052\uff23\053\uff23" +
    "\061\uff23\062\uff23\001\002\000\022\002\uff22\004\uff22\037" +
    "\u011c\050\uff22\052\uff22\053\uff22\061\uff22\062\uff22\001\002" +
    "\000\004\077\u0117\001\002\000\020\002\uff21\004\uff21\050" +
    "\uff21\052\uff21\053\uff21\061\uff21\062\uff21\001\002\000\026" +
    "\002\uff3e\043\u0108\044\u010b\046\u010a\047\u0109\050\uff3e\052" +
    "\uff3e\053\uff3e\061\uff3e\062\uff3e\001\002\000\016\002\uff3a" +
    "\050\uff3a\052\uff3a\053\uff3a\061\uff3a\062\uff3a\001\002\000" +
    "\020\002\uff41\004\u0128\050\uff41\052\uff41\053\uff41\061\uff41" +
    "\062\uff41\001\002\000\024\002\uff30\004\uff30\013\u0123\037" +
    "\u0122\050\uff30\052\uff30\053\uff30\061\uff30\062\uff30\001\002" +
    "\000\004\077\u0121\001\002\000\004\035\u0124\001\002\000" +
    "\022\002\uff2e\004\uff2e\037\u0125\050\uff2e\052\uff2e\053\uff2e" +
    "\061\uff2e\062\uff2e\001\002\000\004\077\u0121\001\002\000" +
    "\020\002\uff2d\004\uff2d\050\uff2d\052\uff2d\053\uff2d\061\uff2d" +
    "\062\uff2d\001\002\000\020\002\uff2f\004\uff2f\050\uff2f\052" +
    "\uff2f\053\uff2f\061\uff2f\062\uff2f\001\002\000\026\002\uff3d" +
    "\043\u0108\044\u010b\046\u010a\047\u0109\050\uff3d\052\uff3d\053" +
    "\uff3d\061\uff3d\062\uff3d\001\002\000\016\002\uff39\050\uff39" +
    "\052\uff39\053\uff39\061\uff39\062\uff39\001\002\000\016\002" +
    "\uff24\004\uff24\013\u0118\025\140\031\246\037\u0119\001\002" +
    "\000\004\025\u012c\001\002\000\014\026\u012d\043\042\044" +
    "\047\046\046\047\045\001\002\000\024\002\ufffe\004\u0134" +
    "\043\112\044\106\045\027\046\110\047\113\057\020\060" +
    "\017\001\002\000\004\026\u012f\001\002\000\024\002\ufffb" +
    "\004\u0131\043\112\044\106\045\027\046\110\047\113\057" +
    "\020\060\017\001\002\000\004\002\ufff8\001\002\000\022" +
    "\002\ufff9\043\112\044\106\045\027\046\110\047\113\057" +
    "\020\060\017\001\002\000\004\002\ufff3\001\002\000\004" +
    "\002\ufffc\001\002\000\022\002\ufffd\043\112\044\106\045" +
    "\027\046\110\047\113\057\020\060\017\001\002\000\004" +
    "\002\ufffa\001\002\000\016\002\uff30\004\uff30\013\u0123\025" +
    "\115\031\266\037\u0122\001\002\000\020\033\u013b\034\u013a" +
    "\067\335\075\064\076\070\077\065\100\u0138\001\002\000" +
    "\036\002\uff5c\004\u0144\043\uff5c\044\uff5c\045\uff5c\046\uff5c" +
    "\047\uff5c\050\uff5c\052\uff5c\053\uff5c\057\uff5c\060\uff5c\061" +
    "\uff5c\062\uff5c\001\002\000\052\002\uff5d\004\u0142\014\075" +
    "\015\072\016\073\017\077\020\074\040\076\043\uff5d\044" +
    "\uff5d\045\uff5d\046\uff5d\047\uff5d\050\uff5d\052\uff5d\053\uff5d" +
    "\057\uff5d\060\uff5d\061\uff5d\062\uff5d\001\002\000\036\002" +
    "\uff5e\004\u0140\043\uff5e\044\uff5e\045\uff5e\046\uff5e\047\uff5e" +
    "\050\uff5e\052\uff5e\053\uff5e\057\uff5e\060\uff5e\061\uff5e\062" +
    "\uff5e\001\002\000\036\002\uff5b\004\u013c\043\uff5b\044\uff5b" +
    "\045\uff5b\046\uff5b\047\uff5b\050\uff5b\052\uff5b\053\uff5b\057" +
    "\uff5b\060\uff5b\061\uff5b\062\uff5b\001\002\000\036\002\uff58" +
    "\043\uff58\044\uff58\045\uff58\046\uff58\047\uff58\050\uff58\052" +
    "\uff58\053\uff58\057\uff58\060\uff58\061\uff58\062\uff58\077\u013d" +
    "\001\002\000\004\013\u013f\001\002\000\034\002\uff54\043" +
    "\uff54\044\uff54\045\uff54\046\uff54\047\uff54\050\uff54\052\uff54" +
    "\053\uff54\057\uff54\060\uff54\061\uff54\062\uff54\001\002\000" +
    "\016\033\u013b\034\u013a\075\064\076\070\077\065\100\u0138" +
    "\001\002\000\036\002\uff5a\043\uff5a\044\uff5a\045\uff5a\046" +
    "\uff5a\047\uff5a\050\uff5a\052\uff5a\053\uff5a\057\uff5a\060\uff5a" +
    "\061\uff5a\062\uff5a\077\u013d\001\002\000\034\002\uff56\043" +
    "\uff56\044\uff56\045\uff56\046\uff56\047\uff56\050\uff56\052\uff56" +
    "\053\uff56\057\uff56\060\uff56\061\uff56\062\uff56\001\002\000" +
    "\036\002\uff57\043\uff57\044\uff57\045\uff57\046\uff57\047\uff57" +
    "\050\uff57\052\uff57\053\uff57\057\uff57\060\uff57\061\uff57\062" +
    "\uff57\077\u013d\001\002\000\034\002\uff53\043\uff53\044\uff53" +
    "\045\uff53\046\uff53\047\uff53\050\uff53\052\uff53\053\uff53\057" +
    "\uff53\060\uff53\061\uff53\062\uff53\001\002\000\036\002\uff59" +
    "\043\uff59\044\uff59\045\uff59\046\uff59\047\uff59\050\uff59\052" +
    "\uff59\053\uff59\057\uff59\060\uff59\061\uff59\062\uff59\077\u013d" +
    "\001\002\000\034\002\uff55\043\uff55\044\uff55\045\uff55\046" +
    "\uff55\047\uff55\050\uff55\052\uff55\053\uff55\057\uff55\060\uff55" +
    "\061\uff55\062\uff55\001\002\000\022\002\uff7e\004\u0166\014" +
    "\u014c\050\uff7e\052\uff7e\053\uff7e\061\uff7e\062\uff7e\001\002" +
    "\000\022\002\uff7d\004\u0161\014\u014c\050\uff7d\052\uff7d\053" +
    "\uff7d\061\uff7d\062\uff7d\001\002\000\034\002\uff7b\004\u015c" +
    "\014\u0155\015\072\016\073\017\077\020\074\040\076\050" +
    "\uff7b\052\uff7b\053\uff7b\061\uff7b\062\uff7b\001\002\000\022" +
    "\002\uff7c\004\u014b\014\u014c\050\uff7c\052\uff7c\053\uff7c\061" +
    "\uff7c\062\uff7c\001\002\000\020\002\uff75\004\u0159\050\uff75" +
    "\052\uff75\053\uff75\061\uff75\062\uff75\001\002\000\020\002" +
    "\uff79\050\uff79\052\uff79\053\uff79\055\023\061\uff79\062\uff79" +
    "\001\002\000\004\100\u014d\001\002\000\022\002\uff52\004" +
    "\uff52\014\u014e\050\uff52\052\uff52\053\uff52\061\uff52\062\uff52" +
    "\001\002\000\016\033\u0152\034\u014f\075\064\076\070\077" +
    "\065\100\u0150\001\002\000\022\002\uff51\004\uff51\014\u014c" +
    "\050\uff51\052\uff51\053\uff51\061\uff51\062\uff51\001\002\000" +
    "\022\002\uff4f\004\uff4f\014\u014c\050\uff4f\052\uff4f\053\uff4f" +
    "\061\uff4f\062\uff4f\001\002\000\034\002\uff4e\004\uff4e\014" +
    "\u0155\015\072\016\073\017\077\020\074\040\076\050\uff4e" +
    "\052\uff4e\053\uff4e\061\uff4e\062\uff4e\001\002\000\022\002" +
    "\uff50\004\uff50\014\u014c\050\uff50\052\uff50\053\uff50\061\uff50" +
    "\062\uff50\001\002\000\020\002\uff4c\004\uff4c\050\uff4c\052" +
    "\uff4c\053\uff4c\061\uff4c\062\uff4c\001\002\000\020\002\uff4a" +
    "\004\uff4a\050\uff4a\052\uff4a\053\uff4a\061\uff4a\062\uff4a\001" +
    "\002\000\012\075\064\076\070\077\065\100\u014d\001\002" +
    "\000\020\002\uff4b\004\uff4b\050\uff4b\052\uff4b\053\uff4b\061" +
    "\uff4b\062\uff4b\001\002\000\020\002\uff4d\004\uff4d\050\uff4d" +
    "\052\uff4d\053\uff4d\061\uff4d\062\uff4d\001\002\000\016\002" +
    "\uff71\050\uff71\052\uff71\053\uff71\061\uff71\062\uff71\001\002" +
    "\000\020\002\uff6c\050\uff6c\052\uff6c\053\uff6c\055\023\061" +
    "\uff6c\062\uff6c\001\002\000\016\002\uff69\050\uff69\052\uff69" +
    "\053\uff69\061\uff69\062\uff69\001\002\000\020\002\uff73\004" +
    "\u015e\050\uff73\052\uff73\053\uff73\061\uff73\062\uff73\001\002" +
    "\000\020\002\uff77\050\uff77\052\uff77\053\uff77\055\023\061" +
    "\uff77\062\uff77\001\002\000\016\002\uff6f\050\uff6f\052\uff6f" +
    "\053\uff6f\061\uff6f\062\uff6f\001\002\000\020\002\uff6b\050" +
    "\uff6b\052\uff6b\053\uff6b\055\023\061\uff6b\062\uff6b\001\002" +
    "\000\016\002\uff68\050\uff68\052\uff68\053\uff68\061\uff68\062" +
    "\uff68\001\002\000\020\002\uff74\004\u0163\050\uff74\052\uff74" +
    "\053\uff74\061\uff74\062\uff74\001\002\000\020\002\uff78\050" +
    "\uff78\052\uff78\053\uff78\055\023\061\uff78\062\uff78\001\002" +
    "\000\016\002\uff70\050\uff70\052\uff70\053\uff70\061\uff70\062" +
    "\uff70\001\002\000\020\002\uff6d\050\uff6d\052\uff6d\053\uff6d" +
    "\055\023\061\uff6d\062\uff6d\001\002\000\016\002\uff67\050" +
    "\uff67\052\uff67\053\uff67\061\uff67\062\uff67\001\002\000\020" +
    "\002\uff76\004\u0168\050\uff76\052\uff76\053\uff76\061\uff76\062" +
    "\uff76\001\002\000\020\002\uff7a\050\uff7a\052\uff7a\053\uff7a" +
    "\055\023\061\uff7a\062\uff7a\001\002\000\016\002\uff72\050" +
    "\uff72\052\uff72\053\uff72\061\uff72\062\uff72\001\002\000\020" +
    "\002\uff6e\050\uff6e\052\uff6e\053\uff6e\055\023\061\uff6e\062" +
    "\uff6e\001\002\000\016\002\uff6a\050\uff6a\052\uff6a\053\uff6a" +
    "\061\uff6a\062\uff6a\001\002\000\012\006\u0187\007\u0184\010" +
    "\u0183\011\u0188\001\002\000\004\051\u016c\001\002\000\004" +
    "\004\u016d\001\002\000\020\043\u0171\044\u016e\046\u016f\047" +
    "\u0172\054\010\055\023\077\024\001\002\000\004\077\u0182" +
    "\001\002\000\004\077\u0181\001\002\000\006\052\u0176\053" +
    "\u0175\001\002\000\004\077\u0174\001\002\000\004\077\u0173" +
    "\001\002\000\026\002\uff30\004\uff30\013\u0123\031\266\037" +
    "\u0122\050\uff30\052\uff30\053\uff30\061\uff30\062\uff30\001\002" +
    "\000\026\002\uff2c\004\uff2c\013\037\031\040\037\036\050" +
    "\uff2c\052\uff2c\053\uff2c\061\uff2c\062\uff2c\001\002\000\032" +
    "\002\uff86\004\u017e\043\uff86\044\uff86\046\uff86\047\uff86\050" +
    "\022\054\uff86\055\uff86\061\uff86\062\uff86\077\uff86\001\002" +
    "\000\004\077\u016a\001\002\000\004\004\u0178\001\002\000" +
    "\020\043\u0171\044\u016e\046\u016f\047\u0172\054\010\055\023" +
    "\077\024\001\002\000\004\053\u017a\001\002\000\032\002" +
    "\uff82\004\u017b\043\uff82\044\uff82\046\uff82\047\uff82\050\022" +
    "\054\uff82\055\uff82\061\uff82\062\uff82\077\uff82\001\002\000" +
    "\030\002\uff80\043\uff80\044\uff80\046\uff80\047\uff80\050\022" +
    "\054\uff80\055\uff80\061\uff80\062\uff80\077\uff80\001\002\000" +
    "\026\002\uff81\043\uff81\044\uff81\046\uff81\047\uff81\054\uff81" +
    "\055\uff81\061\uff81\062\uff81\077\uff81\001\002\000\026\002" +
    "\uff7f\043\uff7f\044\uff7f\046\uff7f\047\uff7f\054\uff7f\055\uff7f" +
    "\061\uff7f\062\uff7f\077\uff7f\001\002\000\030\002\uff84\043" +
    "\uff84\044\uff84\046\uff84\047\uff84\050\022\054\uff84\055\uff84" +
    "\061\uff84\062\uff84\077\uff84\001\002\000\026\002\uff85\043" +
    "\uff85\044\uff85\046\uff85\047\uff85\054\uff85\055\uff85\061\uff85" +
    "\062\uff85\077\uff85\001\002\000\026\002\uff83\043\uff83\044" +
    "\uff83\046\uff83\047\uff83\054\uff83\055\uff83\061\uff83\062\uff83" +
    "\077\uff83\001\002\000\026\002\uff24\004\uff24\013\u0118\031" +
    "\246\037\u0119\050\uff24\052\uff24\053\uff24\061\uff24\062\uff24" +
    "\001\002\000\026\002\uff28\004\uff28\013\u0111\031\226\037" +
    "\u0110\050\uff28\052\uff28\053\uff28\061\uff28\062\uff28\001\002" +
    "\000\006\075\uff02\076\uff02\001\002\000\014\033\uff05\034" +
    "\uff05\075\uff05\076\uff05\100\uff05\001\002\000\006\075\u018c" +
    "\076\u018d\001\002\000\014\033\u018b\034\u0189\075\uff04\076" +
    "\uff04\100\u018a\001\002\000\014\033\uff06\034\uff06\075\uff06" +
    "\076\uff06\100\uff06\001\002\000\006\075\uff03\076\uff03\001" +
    "\002\000\006\004\uff49\051\uff49\001\002\000\006\004\uff48" +
    "\051\uff48\001\002\000\006\004\uff46\051\uff46\001\002\000" +
    "\006\004\uff47\051\uff47\001\002\000\006\004\uff45\051\uff45" +
    "\001\002\000\004\025\u018f\001\002\000\012\043\042\044" +
    "\047\046\046\047\045\001\002\000\004\026\u0191\001\002" +
    "\000\004\077\u013d\001\002\000\022\002\ufff7\043\112\044" +
    "\106\045\027\046\110\047\113\057\020\060\017\001\002" +
    "\000\004\002\ufff0\001\002\000\004\025\u0195\001\002\000" +
    "\004\026\u0196\001\002\000\004\070\u0197\001\002\000\004" +
    "\077\u0198\001\002\000\024\002\ufff5\004\u019a\043\112\044" +
    "\106\045\027\046\110\047\113\057\020\060\017\001\002" +
    "\000\004\002\uffeb\001\002\000\022\002\uffef\043\112\044" +
    "\106\045\027\046\110\047\113\057\020\060\017\001\002" +
    "\000\004\002\uffde\001\002\000\004\021\u019d\001\002\000" +
    "\004\004\u019e\001\002\000\022\043\u0171\044\u016e\046\u016f" +
    "\047\u0172\050\022\054\010\055\023\077\024\001\002\000" +
    "\012\002\uff9c\050\022\061\016\062\005\001\002\000\026" +
    "\002\uff9e\043\u0171\044\u016e\046\u016f\047\u0172\054\010\055" +
    "\023\061\016\062\005\077\024\001\002\000\004\002\uff94" +
    "\001\002\000\012\002\uff99\050\022\061\016\062\005\001" +
    "\002\000\004\002\uff8d\001\002\000\010\002\uff96\061\016" +
    "\062\005\001\002\000\004\002\uff8a\001\002\000\004\002" +
    "\uff90\001\002\000\026\002\uff9a\043\u0171\044\u016e\046\u016f" +
    "\047\u0172\054\010\055\023\061\016\062\005\077\024\001" +
    "\002\000\004\002\uff8e\001\002\000\010\002\uff93\061\016" +
    "\062\005\001\002\000\004\002\uff88\001\002\000\020\002" +
    "\uff13\004\u01ac\050\uff13\052\uff13\053\uff13\061\uff13\062\uff13" +
    "\001\002\000\020\002\uff12\050\uff12\052\uff12\053\uff12\054" +
    "\010\061\uff12\062\uff12\001\002\000\016\002\uff11\050\uff11" +
    "\052\uff11\053\uff11\061\uff11\062\uff11\001\002\000\004\002" +
    "\001\001\002\000\004\021\u01b0\001\002\000\004\004\u01b1" +
    "\001\002\000\022\043\u0171\044\u016e\046\u016f\047\u0172\050" +
    "\022\054\010\055\023\077\024\001\002\000\012\002\uff9b" +
    "\050\022\061\016\062\005\001\002\000\026\002\uff9d\043" +
    "\u0171\044\u016e\046\u016f\047\u0172\054\010\055\023\061\016" +
    "\062\005\077\024\001\002\000\004\002\uff91\001\002\000" +
    "\012\002\uff97\050\022\061\016\062\005\001\002\000\004" +
    "\002\uff8b\001\002\000\010\002\uff95\061\016\062\005\001" +
    "\002\000\004\002\uff89\001\002\000\004\002\uff8f\001\002" +
    "\000\026\002\uff98\043\u0171\044\u016e\046\u016f\047\u0172\054" +
    "\010\055\023\061\016\062\005\077\024\001\002\000\004" +
    "\002\uff8c\001\002\000\010\002\uff92\061\016\062\005\001" +
    "\002\000\004\002\uff87\001\002\000\016\002\uff28\004\uff28" +
    "\013\u0111\025\161\031\226\037\u0110\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01bc\000\030\007\013\010\032\016\005\021\011\022" +
    "\025\025\014\031\027\032\020\033\012\034\006\037\010" +
    "\001\001\000\004\003\u010c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\u016a\001" +
    "\001\000\006\017\u0147\020\065\001\001\000\002\001\001" +
    "\000\004\006\u011f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\u0115\001\001\000\004" +
    "\005\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\u0104\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\066\020\065\001" +
    "\001\000\006\017\201\020\065\001\001\000\006\017\200" +
    "\020\065\001\001\000\002\001\001\000\004\037\106\001" +
    "\001\000\006\017\070\020\065\001\001\000\002\001\001" +
    "\000\006\017\104\020\065\001\001\000\006\017\103\020" +
    "\065\001\001\000\006\017\102\020\065\001\001\000\006" +
    "\017\101\020\065\001\001\000\006\017\100\020\065\001" +
    "\001\000\006\017\077\020\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\123\001\001\000\002\001\001\000\004\037\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\131\001\001\000\002\001\001\000\004\037" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\145\020\065\001\001\000\004\037" +
    "\146\001\001\000\002\001\001\000\004\037\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\153\020" +
    "\065\001\001\000\004\037\154\001\001\000\002\001\001" +
    "\000\004\037\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\167\001\001\000\002\001\001\000\004" +
    "\037\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\175\001\001\000\002\001\001" +
    "\000\004\037\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\204" +
    "\020\065\001\001\000\004\037\205\001\001\000\002\001" +
    "\001\000\004\037\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\241\001\001\000\002\001\001\000\004\013\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\255\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\275\015\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\303" +
    "\001\001\000\002\001\001\000\004\014\305\001\001\000" +
    "\002\001\001\000\004\015\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\325\001\001\000\002\001\001\000\004\010\327\001" +
    "\001\000\002\001\001\000\004\010\331\001\001\000\002" +
    "\001\001\000\004\010\333\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\345\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\352\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\357\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\364\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\371\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\374\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\377\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\u0102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\u0106\001\001\000\002\001\001\000\004\005\033\001\001" +
    "\000\004\006\u011f\001\001\000\004\004\u0115\001\001\000" +
    "\004\003\u010c\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u010e\001\001\000\002\001\001\000\004\003" +
    "\u0114\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\u0113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\u0119\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\u011c\001\001\000\002\001\001\000\004\007\u011e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u0126\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u0125\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\u0128\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\u012d\001" +
    "\001\000\004\037\u0132\001\001\000\002\001\001\000\004" +
    "\037\u012f\001\001\000\002\001\001\000\004\037\u0131\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\u0134" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\u0138\020\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\u013d\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\u0138" +
    "\020\065\001\001\000\004\025\u0140\001\001\000\002\001" +
    "\001\000\004\025\u0142\001\001\000\002\001\001\000\004" +
    "\025\u0144\001\001\000\002\001\001\000\004\023\u0164\001" +
    "\001\000\004\023\u015f\001\001\000\004\023\u015a\001\001" +
    "\000\004\023\u0149\001\001\000\002\001\001\000\004\022" +
    "\u0157\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\u0150\020\065\001\001\000\004\023\u0156\001\001\000" +
    "\004\023\u0155\001\001\000\004\023\u0153\001\001\000\004" +
    "\023\u0152\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\101\020\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u0159\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u015c\001\001" +
    "\000\002\001\001\000\004\022\u015e\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\u0161\001\001\000\002" +
    "\001\001\000\004\022\u0163\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\u0166\001\001\000\002\001\001" +
    "\000\004\022\u0168\001\001\000\002\001\001\000\006\026" +
    "\u0185\027\u0184\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\007\013\010\032\021\011\022\025\025\014\031" +
    "\u016f\001\001\000\004\003\u010c\001\001\000\004\004\u0115" +
    "\001\001\000\002\001\001\000\004\005\033\001\001\000" +
    "\004\006\u011f\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\u017e\001\001\000\004\030\u0176\001\001\000" +
    "\002\001\001\000\016\007\013\010\032\021\011\022\025" +
    "\025\014\031\u0178\001\001\000\002\001\001\000\004\033" +
    "\u017b\001\001\000\004\033\u017c\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\u017f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\u018f" +
    "\001\001\000\002\001\001\000\004\025\u0191\001\001\000" +
    "\004\037\u0192\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\u0198\001\001\000\002\001\001\000\004\037\u019a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\007\013\010\032\021\011\022\025\025\014" +
    "\031\u019e\033\u019f\001\001\000\006\033\u01a6\034\u01a5\001" +
    "\001\000\020\007\013\010\032\021\011\022\025\025\014" +
    "\031\u01a1\034\u01a0\001\001\000\002\001\001\000\006\033" +
    "\u01a3\034\u01a2\001\001\000\002\001\001\000\004\034\u01a4" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\013\010\032\021\011\022\025\025\014\031\u01a8\034\u01a7" +
    "\001\001\000\002\001\001\000\004\034\u01a9\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u01ac\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\007\013\010\032\021\011\022\025" +
    "\025\014\031\u01b1\033\u01b2\001\001\000\006\033\u01b9\034" +
    "\u01b8\001\001\000\020\007\013\010\032\021\011\022\025" +
    "\025\014\031\u01b4\034\u01b3\001\001\000\002\001\001\000" +
    "\006\033\u01b6\034\u01b5\001\001\000\002\001\001\000\004" +
    "\034\u01b7\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\007\013\010\032\021\011\022\025\025\014\031\u01bb" +
    "\034\u01ba\001\001\000\002\001\001\000\004\034\u01bc\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= CONTENIDO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= CONTENIDO2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCIONES ::= NULO IDENTIFICADOR PARENTESISA PARENTESISC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCIONES ::= NULO IDENTIFICADOR PARENTESISA PARENTESISC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCIONES ::= NULO IDENTIFICADOR PARENTESISA PARENTESISC FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCIONES ::= NULO IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCIONES ::= NULO IDENTIFICADOR PARENTESISA PARENTESISC FINLINEA FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCIONES ::= NULO IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCIONES ::= NULO IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCIONES ::= CONSTRUCTOR IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC ASIGNAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCIONES ::= REAL IDENTIFICADOR PARENTESISA PARENTESISC FINLINEA DEVOLVER OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCIONES ::= DESTRUCTOR IDENTIFICADOR PARENTESISA PARENTESISC ELIMINAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCIONES ::= CADENA IDENTIFICADOR PARENTESISA PARENTESISC FINLINEA DEVOLVER CADTEXTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCIONES ::= NULO IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC FINLINEA FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCIONES ::= ENTERO IDENTIFICADOR PARENTESISA PARENTESISC FINLINEA DEVOLVER OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCIONES ::= BOLEANO IDENTIFICADOR PARENTESISA PARENTESISC FINLINEA DEVOLVER OPBOLEANO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCIONES ::= CONSTRUCTOR IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC ASIGNAR FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCIONES ::= DESTRUCTOR IDENTIFICADOR PARENTESISA PARENTESISC ELIMINAR IDENTIFICADOR FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCIONES ::= REAL IDENTIFICADOR PARENTESISA PARENTESISC FINLINEA DEVOLVER OPERACION FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCIONES ::= REAL IDENTIFICADOR PARENTESISA PARENTESISC FINLINEA DEVOLVER OPERACION FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCIONES ::= CADENA IDENTIFICADOR PARENTESISA PARENTESISC FINLINEA DEVOLVER CADTEXTO FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCIONES ::= DESTRUCTOR IDENTIFICADOR PARENTESISA PARENTESISC ELIMINAR IDENTIFICADOR FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCIONES ::= CADENA IDENTIFICADOR PARENTESISA PARENTESISC FINLINEA DEVOLVER CADTEXTO FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCIONES ::= ENTERO IDENTIFICADOR PARENTESISA PARENTESISC FINLINEA DEVOLVER OPERACION FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCIONES ::= REAL IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC FINLINEA DEVOLVER OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCIONES ::= CADENA IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC FINLINEA DEVOLVER CADTEXTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCIONES ::= BOLEANO IDENTIFICADOR PARENTESISA PARENTESISC FINLINEA DEVOLVER OPBOLEANO FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCIONES ::= ENTERO IDENTIFICADOR PARENTESISA PARENTESISC FINLINEA DEVOLVER OPERACION FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCIONES ::= BOLEANO IDENTIFICADOR PARENTESISA PARENTESISC FINLINEA DEVOLVER OPBOLEANO FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCIONES ::= ENTERO IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC FINLINEA DEVOLVER OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCIONES ::= BOLEANO IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC FINLINEA DEVOLVER OPBOLEANO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCIONES ::= REAL IDENTIFICADOR PARENTESISA PARENTESISC FINLINEA DEVOLVER OPERACION FINLINEA FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCIONES ::= CADENA IDENTIFICADOR PARENTESISA PARENTESISC FINLINEA DEVOLVER CADTEXTO FINLINEA FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCIONES ::= REAL IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC FINLINEA DEVOLVER OPERACION FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCIONES ::= DESTRUCTOR IDENTIFICADOR PARENTESISA PARENTESISC ELIMINAR IDENTIFICADOR FINLINEA FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCIONES ::= REAL IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC FINLINEA DEVOLVER OPERACION FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCIONES ::= CADENA IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC FINLINEA DEVOLVER CADTEXTO FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCIONES ::= ENTERO IDENTIFICADOR PARENTESISA PARENTESISC FINLINEA DEVOLVER OPERACION FINLINEA FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCIONES ::= ENTERO IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC FINLINEA DEVOLVER OPERACION FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCIONES ::= BOLEANO IDENTIFICADOR PARENTESISA PARENTESISC FINLINEA DEVOLVER OPBOLEANO FINLINEA FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCIONES ::= CADENA IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC FINLINEA DEVOLVER CADTEXTO FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCIONES ::= BOLEANO IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC FINLINEA DEVOLVER OPBOLEANO FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FUNCIONES ::= ENTERO IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC FINLINEA DEVOLVER OPERACION FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNCIONES ::= BOLEANO IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC FINLINEA DEVOLVER OPBOLEANO FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNCIONES ::= REAL IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC FINLINEA DEVOLVER OPERACION FINLINEA FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCIONES ::= CADENA IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC FINLINEA DEVOLVER CADTEXTO FINLINEA FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCIONES ::= ENTERO IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC FINLINEA DEVOLVER OPERACION FINLINEA FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNCIONES ::= BOLEANO IDENTIFICADOR PARENTESISA PARAMETROS PARENTESISC FINLINEA DEVOLVER OPBOLEANO FINLINEA FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ARREGLOS ::= REAL IDENTIFICADOR CORCHETEA CORCHETEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ARREGLOS ::= CADENA IDENTIFICADOR CORCHETEA CORCHETEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARREGLOS ::= ENTERO IDENTIFICADOR CORCHETEA CORCHETEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARREGLOS ::= BOLEANO IDENTIFICADOR CORCHETEA CORCHETEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARREGLOS ::= REAL IDENTIFICADOR CORCHETEA CORCHETEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARREGLOS ::= CADENA IDENTIFICADOR CORCHETEA CORCHETEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARREGLOS ::= ENTERO IDENTIFICADOR CORCHETEA CORCHETEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARREGLOS ::= BOLEANO IDENTIFICADOR CORCHETEA CORCHETEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL CADTEXTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL OPBOLEANO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARREGLOS ::= REAL IDENTIFICADOR CORCHETEA CORCHETEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARREGLOS ::= CADENA IDENTIFICADOR CORCHETEA CORCHETEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARREGLOS ::= ENTERO IDENTIFICADOR CORCHETEA CORCHETEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARREGLOS ::= BOLEANO IDENTIFICADOR CORCHETEA CORCHETEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR REAL CORCHETEA NUMERO CORCHETEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL NUMERO FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL DECIMAL FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR CADENA CORCHETEA NUMERO CORCHETEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR ENTERO CORCHETEA NUMERO CORCHETEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR BOLEANO CORCHETEA NUMERO CORCHETEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL CADTEXTO FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL OPBOLEANO FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR REAL CORCHETEA NUMERO CORCHETEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL NUMERO FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL DECIMAL FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL CADTEXTO FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR CADENA CORCHETEA NUMERO CORCHETEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR ENTERO CORCHETEA NUMERO CORCHETEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL OPBOLEANO FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR BOLEANO CORCHETEA NUMERO CORCHETEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ARREGLOS ::= REAL IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA DECIMALES LLAVEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ARREGLOS ::= CADENA IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA CADENAS LLAVEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ARREGLOS ::= ENTERO IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA ENTEROS LLAVEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ARREGLOS ::= BOLEANO IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA BOLEANOSNUM LLAVEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ARREGLOS ::= BOLEANO IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA BOLEANOSTEXT LLAVEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR REAL CORCHETEA NUMERO CORCHETEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR CADENA CORCHETEA NUMERO CORCHETEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR ENTERO CORCHETEA NUMERO CORCHETEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR BOLEANO CORCHETEA NUMERO CORCHETEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ARREGLOS ::= REAL IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA DECIMALES LLAVEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ARREGLOS ::= CADENA IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA CADENAS LLAVEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ARREGLOS ::= ENTERO IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA ENTEROS LLAVEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ARREGLOS ::= BOLEANO IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA BOLEANOSNUM LLAVEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ARREGLOS ::= BOLEANO IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA BOLEANOSTEXT LLAVEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ARREGLOS ::= REAL IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA DECIMALES LLAVEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ARREGLOS ::= CADENA IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA CADENAS LLAVEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ARREGLOS ::= ENTERO IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA ENTEROS LLAVEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ARREGLOS ::= BOLEANO IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA BOLEANOSNUM LLAVEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ARREGLOS ::= BOLEANO IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA BOLEANOSTEXT LLAVEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // METODOSYPROPIEDADES ::= METODO TDISPONIBLEM DOSPUNTOS FINLINEA IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // METODOSYPROPIEDADES ::= PROPIEDAD TDISPONIBLEP DOSPUNTOS FINLINEA IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // METODOSYPROPIEDADES ::= METODO TDISPONIBLEM DOSPUNTOS FINLINEA CONTENIDO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // METODOSYPROPIEDADES ::= PROPIEDAD TDISPONIBLEP DOSPUNTOS FINLINEA CONTENIDO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // METODOSYPROPIEDADES ::= METODO TDISPONIBLEM DOSPUNTOS FINLINEA CONTENIDO IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // METODOSYPROPIEDADES ::= METODO TDISPONIBLEM DOSPUNTOS FINLINEA IF CONTENIDO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // METODOSYPROPIEDADES ::= PROPIEDAD TDISPONIBLEP DOSPUNTOS FINLINEA CONTENIDO IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // METODOSYPROPIEDADES ::= PROPIEDAD TDISPONIBLEP DOSPUNTOS FINLINEA IF CONTENIDO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // METODOSYPROPIEDADES ::= METODO TDISPONIBLEM DOSPUNTOS FINLINEA IF CONTENIDO IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // METODOSYPROPIEDADES ::= PROPIEDAD TDISPONIBLEP DOSPUNTOS FINLINEA IF CONTENIDO IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // METODOSYPROPIEDADES ::= METODO TDISPONIBLEM DOSPUNTOS FINLINEA IF METODOSYPROPIEDADES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // METODOSYPROPIEDADES ::= METODO TDISPONIBLEM DOSPUNTOS FINLINEA CONTENIDO IF CONTENIDO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // METODOSYPROPIEDADES ::= PROPIEDAD TDISPONIBLEP DOSPUNTOS FINLINEA CONTENIDO IF CONTENIDO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // METODOSYPROPIEDADES ::= PROPIEDAD TDISPONIBLEP DOSPUNTOS FINLINEA IF METODOSYPROPIEDADES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // METODOSYPROPIEDADES ::= METODO TDISPONIBLEM DOSPUNTOS FINLINEA CONTENIDO METODOSYPROPIEDADES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // METODOSYPROPIEDADES ::= PROPIEDAD TDISPONIBLEP DOSPUNTOS FINLINEA CONTENIDO METODOSYPROPIEDADES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // METODOSYPROPIEDADES ::= METODO TDISPONIBLEM DOSPUNTOS FINLINEA CONTENIDO IF METODOSYPROPIEDADES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // METODOSYPROPIEDADES ::= METODO TDISPONIBLEM DOSPUNTOS FINLINEA IF CONTENIDO METODOSYPROPIEDADES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // METODOSYPROPIEDADES ::= PROPIEDAD TDISPONIBLEP DOSPUNTOS FINLINEA CONTENIDO IF METODOSYPROPIEDADES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // METODOSYPROPIEDADES ::= PROPIEDAD TDISPONIBLEP DOSPUNTOS FINLINEA IF CONTENIDO METODOSYPROPIEDADES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // METODOSYPROPIEDADES ::= METODO TDISPONIBLEM DOSPUNTOS FINLINEA IF CONTENIDO IF METODOSYPROPIEDADES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // METODOSYPROPIEDADES ::= PROPIEDAD TDISPONIBLEP DOSPUNTOS FINLINEA IF CONTENIDO IF METODOSYPROPIEDADES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // METODOSYPROPIEDADES ::= METODO TDISPONIBLEM DOSPUNTOS FINLINEA CONTENIDO IF CONTENIDO METODOSYPROPIEDADES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // METODOSYPROPIEDADES ::= PROPIEDAD TDISPONIBLEP DOSPUNTOS FINLINEA CONTENIDO IF CONTENIDO METODOSYPROPIEDADES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODOSYPROPIEDADES",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IF ::= SI CONDICIONANTE ENTONCES FINLINEA CONTENIDO FINSI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // IF ::= SI CONDICIONANTE ENTONCES FINLINEA CONTENIDO FINSI IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // IF ::= SI CONDICIONANTE ENTONCES FINLINEA CONTENIDO FINSI FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // IF ::= SI CONDICIONANTE ENTONCES FINLINEA CONTENIDO FINSI FINLINEA IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IF ::= SI CONDICIONANTE ENTONCES FINLINEA CONTENIDO SINO CONDICIONANTE FINLINEA CONTENIDO FINSI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // IF ::= SI CONDICIONANTE ENTONCES FINLINEA CONTENIDO SINO CONDICIONANTE FINLINEA CONTENIDO FINSI IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // IF ::= SI CONDICIONANTE ENTONCES FINLINEA CONTENIDO SINO CONDICIONANTE FINLINEA CONTENIDO FINSI FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // IF ::= SI CONDICIONANTE ENTONCES FINLINEA CONTENIDO SINO CONDICIONANTE FINLINEA CONTENIDO FINSI FINLINEA IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ESCRITURA ::= ESCRIBIR BOOLNUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ESCRITURA ::= ESCRIBIR CADTEXTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ESCRITURA ::= ESCRIBIR BOOLTEXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ESCRITURA ::= ESCRIBIR OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ESCRITURA ::= ESCRIBIR BOOLNUM FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ESCRITURA ::= ESCRIBIR BOOLTEXT FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ESCRITURA ::= ESCRIBIR CADTEXTO FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ESCRITURA ::= ESCRIBIR OPERACION FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ESCRITURA ::= ESCRIBIR BOOLNUM CONTENIDOESCRI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ESCRITURA ::= ESCRIBIR BOOLTEXT CONTENIDOESCRI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ESCRITURA ::= ESCRIBIR CADTEXTO CONTENIDOESCRI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ESCRITURA ::= ESCRIBIR OPERACION CONTENIDOESCRI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ESCRITURA ::= ESCRIBIR BOOLNUM FINLINEA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ESCRITURA ::= ESCRIBIR BOOLTEXT FINLINEA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ESCRITURA ::= ESCRIBIR CADTEXTO FINLINEA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ESCRITURA ::= ESCRIBIR OPERACION FINLINEA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ESCRITURA ::= ESCRIBIR BOOLNUM CONTENIDOESCRI FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ESCRITURA ::= ESCRIBIR CADTEXTO CONTENIDOESCRI FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ESCRITURA ::= ESCRIBIR BOOLTEXT CONTENIDOESCRI FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ESCRITURA ::= ESCRIBIR OPERACION CONTENIDOESCRI FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ESCRITURA ::= ESCRIBIR BOOLNUM CONTENIDOESCRI FINLINEA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ESCRITURA ::= ESCRIBIR BOOLTEXT CONTENIDOESCRI FINLINEA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ESCRITURA ::= ESCRIBIR OPERACION CONTENIDOESCRI FINLINEA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ESCRITURA ::= ESCRIBIR CADTEXTO CONTENIDOESCRI FINLINEA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CONTENIDO ::= ASIGNAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CONTENIDO ::= LECTURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CONTENIDO ::= ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CONTENIDO ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CONTENIDO ::= DECVARIABLES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CONTENIDO2 ::= IF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO2",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CONTENIDO2 ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO2",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CONTENIDO2 ::= METODOSYPROPIEDADES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO2",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ASIGNAR ::= IDENTIFICADOR SIGUAL BOOLNUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ASIGNAR ::= IDENTIFICADOR SIGUAL OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ASIGNAR ::= IDENTIFICADOR SIGUAL CADTEXTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ASIGNAR ::= IDENTIFICADOR SIGUAL BOOLTEXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ASIGNAR ::= IDENTIFICADOR SIGUAL BOOLNUM FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ASIGNAR ::= IDENTIFICADOR SIGUAL CADTEXTO FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ASIGNAR ::= IDENTIFICADOR SIGUAL BOOLTEXT FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ASIGNAR ::= IDENTIFICADOR SIGUAL OPERACION FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ASIGNAR ::= IDENTIFICADOR SIGUAL BOOLNUM FINLINEA ASIGNAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ASIGNAR ::= IDENTIFICADOR SIGUAL CADTEXTO FINLINEA ASIGNAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ASIGNAR ::= IDENTIFICADOR SIGUAL BOOLTEXT FINLINEA ASIGNAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ASIGNAR ::= IDENTIFICADOR SIGUAL OPERACION FINLINEA ASIGNAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CONTENIDOESCRI ::= SUMA CADTEXTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOESCRI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CONTENIDOESCRI ::= SUMA CADTEXTO SUMA BOOLNUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOESCRI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CONTENIDOESCRI ::= SUMA CADTEXTO SUMA BOOLTEXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOESCRI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // CONTENIDOESCRI ::= SUMA CADTEXTO SUMA CADTEXTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOESCRI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // CONTENIDOESCRI ::= SUMA CADTEXTO SUMA OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOESCRI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // CONTENIDOESCRI ::= SUMA CADTEXTO SUMA BOOLNUM CONTENIDOESCRI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOESCRI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // CONTENIDOESCRI ::= SUMA CADTEXTO SUMA BOOLTEXT CONTENIDOESCRI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOESCRI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // CONTENIDOESCRI ::= SUMA CADTEXTO SUMA CADTEXTO CONTENIDOESCRI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOESCRI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // CONTENIDOESCRI ::= SUMA CADTEXTO SUMA OPERACION CONTENIDOESCRI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOESCRI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // CONDICIONANTE ::= IDENTIFICADOR OPERADORES BOOLNUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONANTE",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // CONDICIONANTE ::= IDENTIFICADOR OPERADORES CADTEXTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONANTE",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // CONDICIONANTE ::= IDENTIFICADOR OPERADORES2 NUMERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONANTE",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // CONDICIONANTE ::= IDENTIFICADOR OPERADORES BOOLTEXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONANTE",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // CONDICIONANTE ::= IDENTIFICADOR OPERADORES2 DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONANTE",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // DECVARIABLES ::= REAL IDREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // DECVARIABLES ::= CADENA IDCAD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // DECVARIABLES ::= ENTERO IDINT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // DECVARIABLES ::= BOLEANO IDBOOL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // DECVARIABLES ::= REAL IDREAL FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // DECVARIABLES ::= CADENA IDCAD FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // DECVARIABLES ::= ENTERO IDINT FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // DECVARIABLES ::= BOLEANO IDBOOL FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // DECVARIABLES ::= REAL IDREAL FINLINEA DECVARIABLES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // DECVARIABLES ::= CADENA IDCAD FINLINEA DECVARIABLES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // DECVARIABLES ::= ENTERO IDINT FINLINEA DECVARIABLES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // DECVARIABLES ::= BOLEANO IDBOOL FINLINEA DECVARIABLES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // PARAMETROS ::= REAL IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // PARAMETROS ::= CADENA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // PARAMETROS ::= ENTERO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // PARAMETROS ::= BOLEANO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // PARAMETROS ::= REAL IDENTIFICADOR COMA PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // PARAMETROS ::= CADENA IDENTIFICADOR COMA PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // PARAMETROS ::= ENTERO IDENTIFICADOR COMA PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // PARAMETROS ::= BOLEANO IDENTIFICADOR COMA PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // IDBOOL ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDBOOL",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // IDBOOL ::= IDENTIFICADOR COMA IDBOOL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDBOOL",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // IDBOOL ::= IDENTIFICADOR SIGUAL OPBOLEANO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDBOOL",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // IDBOOL ::= IDENTIFICADOR SIGUAL OPBOLEANO COMA IDBOOL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDBOOL",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // IDREAL ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDREAL",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // IDREAL ::= IDENTIFICADOR COMA IDREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDREAL",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // IDREAL ::= IDENTIFICADOR SIGUAL DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDREAL",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // IDREAL ::= IDENTIFICADOR SIGUAL DECIMAL COMA IDREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDREAL",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // IDCAD ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDCAD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // IDCAD ::= IDENTIFICADOR COMA IDCAD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDCAD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // IDCAD ::= IDENTIFICADOR SIGUAL CADTEXTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDCAD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // IDCAD ::= IDENTIFICADOR SIGUAL CADTEXTO COMA IDCAD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDCAD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // IDINT ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDINT",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // IDINT ::= IDENTIFICADOR COMA IDINT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDINT",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // IDINT ::= IDENTIFICADOR SIGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDINT",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // IDINT ::= IDENTIFICADOR SIGUAL NUMERO COMA IDINT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDINT",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // OPERACION ::= NUMEROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // OPERACION ::= OPERACION MOD OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // OPERACION ::= OPERACION SUMA OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // OPERACION ::= OPERACION RESTA OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // OPERACION ::= OPERACION DIVISION OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // OPERACION ::= OPERACION EXPONENTE OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // OPERACION ::= OPERACION MULTIPLICACION OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // NUMEROS ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUMEROS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // NUMEROS ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUMEROS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // NUMEROS ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUMEROS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // NUMEROS ::= NUMERO OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUMEROS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // NUMEROS ::= DECIMAL OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUMEROS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // NUMEROS ::= IDENTIFICADOR OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUMEROS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // LECTURA ::= LEER IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LECTURA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // LECTURA ::= LEER IDENTIFICADOR FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LECTURA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // LECTURA ::= LEER IDENTIFICADOR FINLINEA LECTURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LECTURA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // DECIMALES ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECIMALES",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // DECIMALES ::= DECIMAL COMA DECIMALES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECIMALES",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // ENTEROS ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTEROS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // ENTEROS ::= ENTERO COMA ENTEROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTEROS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // CADENAS ::= CADTEXTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CADENAS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // CADENAS ::= CADTEXTO COMA CADENAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CADENAS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // BOLEANOSTEXT ::= BOOLTEXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOLEANOSTEXT",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // BOLEANOSTEXT ::= BOOLTEXT COMA BOLEANOSTEXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOLEANOSTEXT",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // BOLEANOSNUM ::= BOOLNUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOLEANOSNUM",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // BOLEANOSNUM ::= BOOLNUM COMA BOLEANOSNUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOLEANOSNUM",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // OPERADORES ::= DOBLEIGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // OPERADORES ::= NEGAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // OPERADORES2 ::= OPERADORES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // OPERADORES2 ::= MAYMEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // OPERADORES2 ::= IGUALMAYMEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORES2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
