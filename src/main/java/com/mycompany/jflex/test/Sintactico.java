
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.jflex.test;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\003\000\002\002\004\000\002\010" +
    "\005\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\012\005\000\002\012\003\000\002\012" +
    "\005\000\002\012\003\000\002\005\003\000\002\005\005" +
    "\000\002\003\007\000\002\003\007\000\002\003\007\000" +
    "\002\003\007\000\002\003\005\000\002\003\005\000\002" +
    "\003\010\000\002\003\010\000\002\003\010\000\002\003" +
    "\010\000\002\003\006\000\002\003\006\000\002\006\004" +
    "\000\002\006\006\000\002\017\013\000\002\017\012\000" +
    "\002\017\013\000\002\017\012\000\002\017\013\000\002" +
    "\017\012\000\002\017\013\000\002\017\012\000\002\017" +
    "\013\000\002\017\012\000\002\020\011\000\002\020\011" +
    "\000\002\020\011\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\024\005\000\002\023\005\000\002" +
    "\021\011\000\002\021\011\000\002\021\011\000\002\021" +
    "\011\000\002\021\011\000\002\025\006\000\002\025\005" +
    "\000\002\043\010\000\002\043\003\000\002\041\010\000" +
    "\002\041\003\000\002\042\007\000\002\042\003\000\002" +
    "\036\010\000\002\036\003\000\002\035\010\000\002\035" +
    "\003\000\002\034\007\000\002\034\003\000\002\015\004" +
    "\000\002\015\003\000\002\015\004\000\002\015\003\000" +
    "\002\015\003\000\002\014\004\000\002\014\003\000\002" +
    "\014\004\000\002\014\003\000\002\047\003\000\002\027" +
    "\007\000\002\027\011\000\002\030\010\000\002\030\006" +
    "\000\002\031\007\000\002\033\006\000\002\033\005\000" +
    "\002\032\007\000\002\032\006\000\002\044\012\000\002" +
    "\045\007\000\002\045\005\000\002\046\012\000\002\004" +
    "\004\000\002\004\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\051\007\000\002\040\004\000" +
    "\002\040\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\010\004\013\030\006\033\014\001\002\000" +
    "\012\002\uffa3\004\013\030\006\033\014\001\002\000\004" +
    "\002\u0134\001\002\000\004\115\u0132\001\002\000\012\002" +
    "\uffa2\004\uffa2\030\uffa2\033\uffa2\001\002\000\004\002\001" +
    "\001\002\000\012\002\uffa0\004\uffa0\030\uffa0\033\uffa0\001" +
    "\002\000\012\002\uffa1\004\uffa1\030\uffa1\033\uffa1\001\002" +
    "\000\004\112\323\001\002\000\004\046\015\001\002\000" +
    "\004\047\016\001\002\000\004\114\017\001\002\000\022" +
    "\062\020\063\040\064\036\065\032\066\027\067\035\070" +
    "\034\112\023\001\002\000\004\111\301\001\002\000\032" +
    "\002\uff97\004\uff97\030\uff97\033\uff97\062\uff97\063\uff97\064" +
    "\uff97\065\uff97\066\uff97\067\uff97\070\uff97\112\uff97\001\002" +
    "\000\032\002\uff9d\004\uff9d\030\uff9d\033\uff9d\062\020\063" +
    "\040\064\036\065\032\066\027\067\035\070\034\112\023" +
    "\001\002\000\004\111\271\001\002\000\012\002\uff9f\004" +
    "\uff9f\030\uff9f\033\uff9f\001\002\000\032\002\uff98\004\uff98" +
    "\030\uff98\033\uff98\062\uff98\063\uff98\064\uff98\065\uff98\066" +
    "\uff98\067\uff98\070\uff98\112\uff98\001\002\000\032\002\uff9c" +
    "\004\uff9c\030\uff9c\033\uff9c\062\uff9c\063\uff9c\064\uff9c\065" +
    "\uff9c\066\uff9c\067\uff9c\070\uff9c\112\uff9c\001\002\000\004" +
    "\111\251\001\002\000\032\002\uff9a\004\uff9a\030\uff9a\033" +
    "\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a" +
    "\070\uff9a\112\uff9a\001\002\000\032\002\uff9b\004\uff9b\030" +
    "\uff9b\033\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b" +
    "\067\uff9b\070\uff9b\112\uff9b\001\002\000\006\072\223\111" +
    "\221\001\002\000\032\002\uff99\004\uff99\030\uff99\033\uff99" +
    "\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99\067\uff99\070" +
    "\uff99\112\uff99\001\002\000\010\111\214\113\216\115\215" +
    "\001\002\000\004\111\212\001\002\000\020\073\132\075" +
    "\130\076\126\077\131\100\124\101\123\111\125\001\002" +
    "\000\032\002\uff96\004\uff96\030\uff96\033\uff96\062\uff96\063" +
    "\uff96\064\uff96\065\uff96\066\uff96\067\uff96\070\uff96\112\uff96" +
    "\001\002\000\006\074\043\111\041\001\002\000\010\040" +
    "\060\041\ufff0\046\061\001\002\000\004\041\051\001\002" +
    "\000\004\046\044\001\002\000\004\062\045\001\002\000" +
    "\004\111\046\001\002\000\004\047\047\001\002\000\004" +
    "\114\050\001\002\000\032\002\uffd4\004\uffd4\030\uffd4\033" +
    "\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4" +
    "\070\uffd4\112\uffd4\001\002\000\006\057\053\060\052\001" +
    "\002\000\004\037\056\001\002\000\004\037\054\001\002" +
    "\000\034\002\uffeb\004\uffeb\030\uffeb\033\uffeb\062\uffeb\063" +
    "\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\112\uffeb" +
    "\114\055\001\002\000\032\002\uffe5\004\uffe5\030\uffe5\033" +
    "\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5" +
    "\070\uffe5\112\uffe5\001\002\000\034\002\uffec\004\uffec\030" +
    "\uffec\033\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec" +
    "\067\uffec\070\uffec\112\uffec\114\057\001\002\000\032\002" +
    "\uffe6\004\uffe6\030\uffe6\033\uffe6\062\uffe6\063\uffe6\064\uffe6" +
    "\065\uffe6\066\uffe6\067\uffe6\070\uffe6\112\uffe6\001\002\000" +
    "\004\111\121\001\002\000\016\047\062\062\071\063\065" +
    "\064\064\065\070\066\063\001\002\000\004\114\115\001" +
    "\002\000\004\111\ufffb\001\002\000\004\111\ufffa\001\002" +
    "\000\004\111\ufffc\001\002\000\004\111\112\001\002\000" +
    "\004\047\072\001\002\000\004\111\ufffe\001\002\000\004" +
    "\111\ufffd\001\002\000\004\114\073\001\002\000\004\017" +
    "\074\001\002\000\006\111\075\113\076\001\002\000\016" +
    "\102\104\103\101\104\105\105\102\106\103\114\ufff3\001" +
    "\002\000\016\102\104\103\101\104\105\105\102\106\103" +
    "\114\ufff1\001\002\000\004\114\100\001\002\000\042\002" +
    "\uffdc\004\uffdc\007\uffdc\020\uffdc\021\uffdc\030\uffdc\033\uffdc" +
    "\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070" +
    "\uffdc\112\uffdc\114\uffdc\001\002\000\006\111\ufff8\113\ufff8" +
    "\001\002\000\006\111\ufff7\113\ufff7\001\002\000\006\111" +
    "\ufff5\113\ufff5\001\002\000\006\111\ufff9\113\ufff9\001\002" +
    "\000\006\111\ufff6\113\ufff6\001\002\000\006\111\075\113" +
    "\076\001\002\000\004\114\ufff2\001\002\000\006\111\075" +
    "\113\076\001\002\000\004\114\ufff4\001\002\000\006\040" +
    "\113\047\uffe2\001\002\000\014\062\071\063\065\064\064" +
    "\065\070\066\063\001\002\000\004\047\uffe1\001\002\000" +
    "\004\017\116\001\002\000\006\111\075\113\076\001\002" +
    "\000\004\114\120\001\002\000\042\002\uffdb\004\uffdb\007" +
    "\uffdb\020\uffdb\021\uffdb\030\uffdb\033\uffdb\062\uffdb\063\uffdb" +
    "\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\112\uffdb\114" +
    "\uffdb\001\002\000\014\037\ufff0\040\060\041\ufff0\113\ufff0" +
    "\114\ufff0\001\002\000\012\037\uffef\041\uffef\113\uffef\114" +
    "\uffef\001\002\000\004\046\205\001\002\000\004\046\200" +
    "\001\002\000\010\040\060\046\164\113\ufff0\001\002\000" +
    "\004\046\157\001\002\000\004\113\152\001\002\000\004" +
    "\046\145\001\002\000\004\046\140\001\002\000\004\046" +
    "\133\001\002\000\004\062\134\001\002\000\004\111\135" +
    "\001\002\000\004\047\136\001\002\000\004\114\137\001" +
    "\002\000\032\002\uffd6\004\uffd6\030\uffd6\033\uffd6\062\uffd6" +
    "\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\112" +
    "\uffd6\001\002\000\004\064\141\001\002\000\004\111\142" +
    "\001\002\000\004\047\143\001\002\000\004\114\144\001" +
    "\002\000\032\002\uffcc\004\uffcc\030\uffcc\033\uffcc\062\uffcc" +
    "\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\112" +
    "\uffcc\001\002\000\004\064\146\001\002\000\004\111\147" +
    "\001\002\000\004\047\150\001\002\000\004\114\151\001" +
    "\002\000\032\002\uffce\004\uffce\030\uffce\033\uffce\062\uffce" +
    "\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce\112" +
    "\uffce\001\002\000\004\036\155\001\002\000\034\002\uffe9" +
    "\004\uffe9\030\uffe9\033\uffe9\062\uffe9\063\uffe9\064\uffe9\065" +
    "\uffe9\066\uffe9\067\uffe9\070\uffe9\112\uffe9\114\154\001\002" +
    "\000\032\002\uffe3\004\uffe3\030\uffe3\033\uffe3\062\uffe3\063" +
    "\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\112\uffe3" +
    "\001\002\000\004\113\156\001\002\000\034\002\uffff\004" +
    "\uffff\030\uffff\033\uffff\062\uffff\063\uffff\064\uffff\065\uffff" +
    "\066\uffff\067\uffff\070\uffff\112\uffff\114\uffff\001\002\000" +
    "\004\064\160\001\002\000\004\111\161\001\002\000\004" +
    "\047\162\001\002\000\004\114\163\001\002\000\032\002" +
    "\uffcd\004\uffcd\030\uffcd\033\uffcd\062\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\067\uffcd\070\uffcd\112\uffcd\001\002\000" +
    "\016\047\165\062\071\063\065\064\064\065\070\066\063" +
    "\001\002\000\004\114\174\001\002\000\004\047\167\001" +
    "\002\000\004\114\170\001\002\000\004\017\171\001\002" +
    "\000\006\111\075\113\076\001\002\000\004\114\173\001" +
    "\002\000\042\002\uffde\004\uffde\007\uffde\020\uffde\021\uffde" +
    "\030\uffde\033\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066" +
    "\uffde\067\uffde\070\uffde\112\uffde\114\uffde\001\002\000\004" +
    "\017\175\001\002\000\006\111\075\113\076\001\002\000" +
    "\004\114\177\001\002\000\042\002\uffdd\004\uffdd\007\uffdd" +
    "\020\uffdd\021\uffdd\030\uffdd\033\uffdd\062\uffdd\063\uffdd\064" +
    "\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\112\uffdd\114\uffdd" +
    "\001\002\000\004\064\201\001\002\000\004\111\202\001" +
    "\002\000\004\047\203\001\002\000\004\114\204\001\002" +
    "\000\032\002\uffcb\004\uffcb\030\uffcb\033\uffcb\062\uffcb\063" +
    "\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\112\uffcb" +
    "\001\002\000\004\064\206\001\002\000\004\111\207\001" +
    "\002\000\004\047\210\001\002\000\004\114\211\001\002" +
    "\000\032\002\uffca\004\uffca\030\uffca\033\uffca\062\uffca\063" +
    "\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca\112\uffca" +
    "\001\002\000\004\037\213\001\002\000\032\002\uffcf\004" +
    "\uffcf\030\uffcf\033\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf" +
    "\066\uffcf\067\uffcf\070\uffcf\112\uffcf\001\002\000\004\037" +
    "\uffd3\001\002\000\004\037\uffd1\001\002\000\004\037\uffd2" +
    "\001\002\000\004\037\220\001\002\000\032\002\uffd0\004" +
    "\uffd0\030\uffd0\033\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0" +
    "\066\uffd0\067\uffd0\070\uffd0\112\uffd0\001\002\000\010\040" +
    "\060\041\ufff0\046\235\001\002\000\004\041\231\001\002" +
    "\000\004\046\224\001\002\000\004\062\225\001\002\000" +
    "\004\111\226\001\002\000\004\047\227\001\002\000\004" +
    "\114\230\001\002\000\032\002\uffd5\004\uffd5\030\uffd5\033" +
    "\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5" +
    "\070\uffd5\112\uffd5\001\002\000\004\113\232\001\002\000" +
    "\004\037\233\001\002\000\034\002\uffee\004\uffee\030\uffee" +
    "\033\uffee\062\uffee\063\uffee\064\uffee\065\uffee\066\uffee\067" +
    "\uffee\070\uffee\112\uffee\114\234\001\002\000\032\002\uffe8" +
    "\004\uffe8\030\uffe8\033\uffe8\062\uffe8\063\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\070\uffe8\112\uffe8\001\002\000\016" +
    "\047\236\062\071\063\065\064\064\065\070\066\063\001" +
    "\002\000\004\114\245\001\002\000\004\047\240\001\002" +
    "\000\004\114\241\001\002\000\004\017\242\001\002\000" +
    "\006\111\075\113\076\001\002\000\004\114\244\001\002" +
    "\000\042\002\uffe0\004\uffe0\007\uffe0\020\uffe0\021\uffe0\030" +
    "\uffe0\033\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0" +
    "\067\uffe0\070\uffe0\112\uffe0\114\uffe0\001\002\000\004\017" +
    "\246\001\002\000\006\111\075\113\076\001\002\000\004" +
    "\114\250\001\002\000\042\002\uffdf\004\uffdf\007\uffdf\020" +
    "\uffdf\021\uffdf\030\uffdf\033\uffdf\062\uffdf\063\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\067\uffdf\070\uffdf\112\uffdf\114\uffdf\001" +
    "\002\000\010\037\ufff0\040\060\046\255\001\002\000\004" +
    "\037\253\001\002\000\034\002\uffea\004\uffea\030\uffea\033" +
    "\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067\uffea" +
    "\070\uffea\112\uffea\114\254\001\002\000\032\002\uffe4\004" +
    "\uffe4\030\uffe4\033\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\067\uffe4\070\uffe4\112\uffe4\001\002\000\016\047" +
    "\256\062\071\063\065\064\064\065\070\066\063\001\002" +
    "\000\004\114\265\001\002\000\004\047\260\001\002\000" +
    "\004\114\261\001\002\000\004\017\262\001\002\000\006" +
    "\111\075\113\076\001\002\000\004\114\264\001\002\000" +
    "\042\002\uffda\004\uffda\007\uffda\020\uffda\021\uffda\030\uffda" +
    "\033\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067" +
    "\uffda\070\uffda\112\uffda\114\uffda\001\002\000\004\017\266" +
    "\001\002\000\006\111\075\113\076\001\002\000\004\114" +
    "\270\001\002\000\042\002\uffd9\004\uffd9\007\uffd9\020\uffd9" +
    "\021\uffd9\030\uffd9\033\uffd9\062\uffd9\063\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\070\uffd9\112\uffd9\114\uffd9\001\002" +
    "\000\004\041\272\001\002\000\004\027\273\001\002\000" +
    "\004\112\274\001\002\000\004\046\275\001\002\000\004" +
    "\047\276\001\002\000\004\114\277\001\002\000\032\002" +
    "\uffa8\004\uffa8\030\uffa8\033\uffa8\062\uffa8\063\uffa8\064\uffa8" +
    "\065\uffa8\066\uffa8\067\uffa8\070\uffa8\112\uffa8\001\002\000" +
    "\012\002\uff9e\004\uff9e\030\uff9e\033\uff9e\001\002\000\010" +
    "\040\060\041\ufff0\046\307\001\002\000\004\041\303\001" +
    "\002\000\004\115\304\001\002\000\004\037\305\001\002" +
    "\000\034\002\uffed\004\uffed\030\uffed\033\uffed\062\uffed\063" +
    "\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed\112\uffed" +
    "\114\306\001\002\000\032\002\uffe7\004\uffe7\030\uffe7\033" +
    "\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7" +
    "\070\uffe7\112\uffe7\001\002\000\016\047\310\062\071\063" +
    "\065\064\064\065\070\066\063\001\002\000\004\114\317" +
    "\001\002\000\004\047\312\001\002\000\004\114\313\001" +
    "\002\000\004\017\314\001\002\000\006\111\075\113\076" +
    "\001\002\000\004\114\316\001\002\000\042\002\uffd8\004" +
    "\uffd8\007\uffd8\020\uffd8\021\uffd8\030\uffd8\033\uffd8\062\uffd8" +
    "\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\112" +
    "\uffd8\114\uffd8\001\002\000\004\017\320\001\002\000\006" +
    "\111\075\113\076\001\002\000\004\114\322\001\002\000" +
    "\042\002\uffd7\004\uffd7\007\uffd7\020\uffd7\021\uffd7\030\uffd7" +
    "\033\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067" +
    "\uffd7\070\uffd7\112\uffd7\114\uffd7\001\002\000\006\005\325" +
    "\114\324\001\002\000\006\006\334\114\330\001\002\000" +
    "\004\112\326\001\002\000\004\114\327\001\002\000\006" +
    "\006\334\114\330\001\002\000\006\007\uffc2\114\uffc2\001" +
    "\002\000\006\007\uffc6\114\uffc6\001\002\000\006\007\364" +
    "\114\361\001\002\000\006\007\uffc4\114\uffc4\001\002\000" +
    "\010\010\336\013\337\014\335\001\002\000\004\035\354" +
    "\001\002\000\004\035\347\001\002\000\004\035\340\001" +
    "\002\000\004\114\341\001\002\000\014\062\071\063\065" +
    "\064\064\065\070\066\063\001\002\000\006\007\uffc3\114" +
    "\uffc3\001\002\000\004\111\121\001\002\000\004\114\345" +
    "\001\002\000\022\006\uffc8\007\uffc8\062\071\063\065\064" +
    "\064\065\070\066\063\114\uffc8\001\002\000\010\006\uffc9" +
    "\007\uffc9\114\uffc9\001\002\000\004\114\350\001\002\000" +
    "\014\062\071\063\065\064\064\065\070\066\063\001\002" +
    "\000\006\006\353\114\330\001\002\000\006\007\uffc7\114" +
    "\uffc7\001\002\000\006\013\337\014\335\001\002\000\004" +
    "\114\355\001\002\000\014\062\071\063\065\064\064\065" +
    "\070\066\063\001\002\000\006\006\360\114\330\001\002" +
    "\000\006\007\uffc5\114\uffc5\001\002\000\004\013\337\001" +
    "\002\000\012\002\uffbc\004\uffbc\030\uffbc\033\uffbc\001\002" +
    "\000\012\002\uffc0\004\uffc0\030\uffc0\033\uffc0\001\002\000" +
    "\012\002\uffbe\004\uffbe\030\uffbe\033\uffbe\001\002\000\010" +
    "\011\366\012\367\015\370\001\002\000\012\002\uffb0\004" +
    "\uffb0\030\uffb0\033\uffb0\001\002\000\004\035\u011d\001\002" +
    "\000\004\035\u0119\001\002\000\004\035\371\001\002\000" +
    "\004\114\372\001\002\000\016\020\u0102\062\373\063\u0103" +
    "\064\u0101\065\377\066\375\001\002\000\004\111\u0118\001" +
    "\002\000\022\007\uffb5\020\u0102\062\373\063\u0103\064\u0101" +
    "\065\377\066\375\114\uffb5\001\002\000\004\111\u0116\001" +
    "\002\000\006\007\u0115\114\361\001\002\000\004\111\u0113" +
    "\001\002\000\022\007\uffb3\020\u0102\062\373\063\u0103\064" +
    "\u0101\065\377\066\375\114\uffb3\001\002\000\004\111\u0111" +
    "\001\002\000\004\046\u0105\001\002\000\004\111\u0104\001" +
    "\002\000\004\046\061\001\002\000\016\047\u0106\062\071" +
    "\063\065\064\064\065\070\066\063\001\002\000\004\114" +
    "\u0110\001\002\000\004\047\u0108\001\002\000\004\114\u0109" +
    "\001\002\000\004\111\u010a\001\002\000\004\041\u010c\001" +
    "\002\000\024\007\uffaf\020\uffaf\021\uffaf\062\uffaf\063\uffaf" +
    "\064\uffaf\065\uffaf\066\uffaf\114\uffaf\001\002\000\004\111" +
    "\u010d\001\002\000\004\114\u010e\001\002\000\026\007\uffa9" +
    "\020\uffa9\021\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066" +
    "\uffa9\111\u010a\114\uffa9\001\002\000\024\007\uffaa\020\uffaa" +
    "\021\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\114" +
    "\uffaa\001\002\000\024\007\uffae\020\uffae\021\uffae\062\uffae" +
    "\063\uffae\064\uffae\065\uffae\066\uffae\114\uffae\001\002\000" +
    "\004\046\164\001\002\000\006\007\uffb4\114\uffb4\001\002" +
    "\000\004\046\235\001\002\000\012\002\uffbf\004\uffbf\030" +
    "\uffbf\033\uffbf\001\002\000\004\012\367\001\002\000\004" +
    "\046\255\001\002\000\006\007\uffb6\114\uffb6\001\002\000" +
    "\004\046\307\001\002\000\004\114\u011a\001\002\000\014" +
    "\062\373\063\u0103\064\u0101\065\377\066\375\001\002\000" +
    "\012\002\uffbd\004\uffbd\030\uffbd\033\uffbd\001\002\000\012" +
    "\002\uffb2\004\uffb2\030\uffb2\033\uffb2\001\002\000\004\114" +
    "\u011e\001\002\000\020\020\u0102\021\u0123\062\373\063\u0103" +
    "\064\u0101\065\377\066\375\001\002\000\024\007\uffba\020" +
    "\u0102\021\u0123\062\373\063\u0103\064\u0101\065\377\066\375" +
    "\114\uffba\001\002\000\006\007\u012e\114\361\001\002\000" +
    "\006\007\uffb7\114\uffb7\001\002\000\024\007\uffb8\020\u0102" +
    "\021\u0123\062\373\063\u0103\064\u0101\065\377\066\375\114" +
    "\uffb8\001\002\000\004\046\u0124\001\002\000\004\047\u0125" +
    "\001\002\000\004\114\u0126\001\002\000\004\071\u0128\001" +
    "\002\000\006\007\uffad\114\uffad\001\002\000\004\111\u0129" +
    "\001\002\000\004\114\u012a\001\002\000\010\007\uffab\071" +
    "\u0128\114\uffab\001\002\000\006\007\uffac\114\uffac\001\002" +
    "\000\006\007\uffb9\114\uffb9\001\002\000\012\002\uffc1\004" +
    "\uffc1\030\uffc1\033\uffc1\001\002\000\006\012\367\015\370" +
    "\001\002\000\006\007\uffbb\114\uffbb\001\002\000\006\007" +
    "\364\114\361\001\002\000\012\002\uffb1\004\uffb1\030\uffb1" +
    "\033\uffb1\001\002\000\004\114\u0133\001\002\000\012\002" +
    "\uff95\004\uff95\030\uff95\033\uff95\001\002\000\004\002\000" +
    "\001\002\000\004\002\uffa4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\016\002\004\004\007\026\006\027\011\050" +
    "\003\051\010\001\001\000\014\004\u0134\026\006\027\011" +
    "\050\003\051\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\036\017\025" +
    "\020\032\021\027\023\020\024\024\040\023\044\030\052" +
    "\021\001\001\000\004\005\301\001\001\000\002\001\001" +
    "\000\024\003\036\017\025\020\032\021\027\023\020\024" +
    "\024\040\277\044\030\052\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\221\001\001\000\002\001\001\000\004\013" +
    "\216\001\001\000\002\001\001\000\004\005\126\001\001" +
    "\000\002\001\001\000\004\005\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\121\001\001\000\006" +
    "\006\066\007\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\076\001\001" +
    "\000\004\011\107\001\001\000\004\011\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\106\001\001\000\002\001\001\000\004" +
    "\012\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\113\007\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\165\007\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\236\007\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\246\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\256\007\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\266\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\310\007\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\320\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\041\330\042\332\043\u012f\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\041\330\042\332" +
    "\043\331\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\034\362\035\361\036\364\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\342\025\341" +
    "\001\001\000\002\001\001\000\004\005\343\001\001\000" +
    "\002\001\001\000\006\007\342\025\345\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\342\025\350\001" +
    "\001\000\006\041\351\042\332\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\342\025" +
    "\355\001\001\000\004\042\356\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\375\017\373\030\377\001\001\000\002" +
    "\001\001\000\010\014\u0116\017\373\030\377\001\001\000" +
    "\002\001\001\000\004\034\u0113\001\001\000\002\001\001" +
    "\000\010\014\u0111\017\373\030\377\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\u0106\007\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\u010a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u010e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\u011b\047\u011a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\u011f\017" +
    "\u011e\030\u0121\031\u0120\001\001\000\012\015\u012e\017\u011e" +
    "\030\u0121\031\u0120\001\001\000\006\034\362\035\u012c\001" +
    "\001\000\002\001\001\000\012\015\u012b\017\u011e\030\u0121" +
    "\031\u0120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\u0126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\u012a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\034\362\035" +
    "\361\036\u0130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= LineasCodigo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NumReal ::= NUMEROS PUNTO NUMEROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NumReal",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TipoDato ::= ENTERO 
            {
              Object RESULT =null;
		 System.out.println("SIM: TipoDato -> ENTERO "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TipoDato",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TipoDato ::= CADENA 
            {
              Object RESULT =null;
		 System.out.println("SIM: TipoDato -> CADENA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TipoDato",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TipoDato ::= BOLEANO 
            {
              Object RESULT =null;
		 System.out.println("SIM: TipoDato -> BOLEANO "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TipoDato",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TipoDato ::= NULO 
            {
              Object RESULT =null;
		 System.out.println("SIM: TipoDato -> NULO "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TipoDato",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TipoDato ::= REAL 
            {
              Object RESULT =null;
		 System.out.println("SIM: TipoDato -> REAL "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TipoDato",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Operadores ::= SUMA 
            {
              Object RESULT =null;
		 System.out.println("SIM: Operadores -> SUMA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Operadores",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Operadores ::= RESTA 
            {
              Object RESULT =null;
		 System.out.println("SIM: Operadores -> RESTA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Operadores",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Operadores ::= MULTIPLICACION 
            {
              Object RESULT =null;
		 System.out.println("SIM: Operadores -> MULTIPLICACION "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Operadores",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Operadores ::= DIVISION 
            {
              Object RESULT =null;
		 System.out.println("SIM: Operadores -> DIVISION "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Operadores",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Operadores ::= MODULO 
            {
              Object RESULT =null;
		 System.out.println("SIM: Operadores -> MODULO "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Operadores",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Operacion ::= ID Operadores Operacion 
            {
              Object RESULT =null;
		 System.out.println("SIM: Operacion -> ID Operadores Operacion "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Operacion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Operacion ::= ID 
            {
              Object RESULT =null;
		 System.out.println("SIM: Operacion -> ID "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Operacion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Operacion ::= NUMEROS Operadores Operacion 
            {
              Object RESULT =null;
		 System.out.println("SIM: Operacion -> NUMEROS Operadores Operacion "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Operacion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Operacion ::= NUMEROS 
            {
              Object RESULT =null;
		 System.out.println("SIM: Operacion -> NUMEROS "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Operacion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Identificadores ::= ID 
            {
              Object RESULT =null;
		 System.out.println("SIM: Identificadores -> ID "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Identificadores ::= ID COMA Identificadores 
            {
              Object RESULT =null;
		 System.out.println("SIM: Identificadores -> ID COMA Identificadores  "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Asignar ::= ENTERO Identificadores IGUAL NUMEROS PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println("SIM: Asignar -> ENTERO Identificadores IGUAL NUMEROS PUNTOYCOMApoDato "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asignar",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Asignar ::= CADENA Identificadores IGUAL STRING PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println("SIM: Asignar -> CADENA Identificadores IGUAL STRING PUNTOYCOMA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asignar",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Asignar ::= BOLEANO Identificadores IGUAL FALSO PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println("SIM: Asignar -> BOLEANO Identificadores IGUAL FALSO PUNTOYCOMA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asignar",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Asignar ::= BOLEANO Identificadores IGUAL VERDADERO PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println("SIM: Asignar -> BOLEANO Identificadores IGUAL VERDADERO PUNTOYCOMA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asignar",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Asignar ::= NULO Identificadores PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println("SIM: Asignar -> NULO Identificadores PUNTOYCOMA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asignar",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Asignar ::= REAL Identificadores NumReal 
            {
              Object RESULT =null;
		 System.out.println("SIM: Asignar -> REAL Identificadores NumReal "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asignar",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Asignar ::= ENTERO Identificadores IGUAL NUMEROS PUNTOYCOMA FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: Asignar -> ENTERO Identificadores IGUAL NUMEROS PUNTOYCOMA FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asignar",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Asignar ::= CADENA Identificadores IGUAL STRING PUNTOYCOMA FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: Asignar -> CADENA Identificadores IGUAL STRING PUNTOYCOMA FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asignar",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Asignar ::= BOLEANO Identificadores IGUAL FALSO PUNTOYCOMA FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: Asignar -> BOLEANO Identificadores IGUAL FALSO PUNTOYCOMA FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asignar",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Asignar ::= BOLEANO Identificadores IGUAL VERDADERO PUNTOYCOMA FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: Asignar -> BOLEANO Identificadores IGUAL VERDADERO PUNTOYCOMA FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asignar",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Asignar ::= NULO Identificadores PUNTOYCOMA FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: Asignar -> NULO Identificadores PUNTOYCOMA FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asignar",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Asignar ::= REAL Identificadores NumReal FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: Asignar -> REAL Identificadores NumReal FINLINEA  "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Asignar",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Parametros ::= TipoDato ID 
            {
              Object RESULT =null;
		 System.out.println("SIM: Parametros -> TipoDato ID  "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Parametros ::= TipoDato ID COMA Parametros 
            {
              Object RESULT =null;
		 System.out.println("SIM: Parametros -> TipoDato ID COMA Parametros "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FuncionesSueltas ::= ENTERO ID INICIOPARENTESIS Parametros FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionesSueltas -> ENTERO ID INICIOPARENTESIS Parametros FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesSueltas",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FuncionesSueltas ::= ENTERO ID INICIOPARENTESIS FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionesSueltas -> ENTERO ID INICIOPARENTESIS FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesSueltas",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FuncionesSueltas ::= REAL ID INICIOPARENTESIS Parametros FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionesSueltas -> REAL ID INICIOPARENTESIS Parametros FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesSueltas",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FuncionesSueltas ::= REAL ID INICIOPARENTESIS FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionesSueltas -> REAL ID INICIOPARENTESIS FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesSueltas",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FuncionesSueltas ::= BOLEANO ID INICIOPARENTESIS Parametros FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionesSueltas -> BOLEANO ID INICIOPARENTESIS Parametros FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesSueltas",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FuncionesSueltas ::= BOLEANO ID INICIOPARENTESIS FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionesSueltas -> BOLEANO ID INICIOPARENTESIS FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesSueltas",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FuncionesSueltas ::= NULO ID INICIOPARENTESIS Parametros FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionesSueltas -> NULO ID INICIOPARENTESIS Parametros FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesSueltas",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FuncionesSueltas ::= NULO ID INICIOPARENTESIS FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionesSueltas -> NULO ID INICIOPARENTESIS FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesSueltas",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FuncionesSueltas ::= CADENA ID INICIOPARENTESIS Parametros FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionesSueltas -> CADENA ID INICIOPARENTESIS Parametros FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesSueltas",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FuncionesSueltas ::= CADENA ID INICIOPARENTESIS FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionesSueltas -> CADENA ID INICIOPARENTESIS FINALPARENTESIS FINLINEA DEVOLVER Operacion FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesSueltas",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FuncionesEspeciales ::= REAL CADENA_REAL INICIOPARENTESIS CADENA ID FINALPARENTESIS FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionesEspeciales -> REAL CADENA_REAL INICIOPARENTESIS CADENA ID FINALPARENTESIS FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesEspeciales",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FuncionesEspeciales ::= ENTERO CADENA_ENTERO INICIOPARENTESIS CADENA ID FINALPARENTESIS FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionesEspeciales -> ENTERO CADENA_ENTERO INICIOPARENTESIS CADENA ID FINALPARENTESIS FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesEspeciales",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FuncionesEspeciales ::= BOLEANO CADENA_BOLEANO INICIOPARENTESIS CADENA ID FINALPARENTESIS FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionesEspeciales -> BOLEANO CADENA_BOLEANO INICIOPARENTESIS CADENA ID FINALPARENTESIS FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesEspeciales",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OpcionesEscribir ::= ID 
            {
              Object RESULT =null;
		 System.out.println("SIM: OpcionesEscribir -> ID "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OpcionesEscribir",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OpcionesEscribir ::= NUMEROS 
            {
              Object RESULT =null;
		 System.out.println("SIM: OpcionesEscribir -> NUMEROS "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OpcionesEscribir",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OpcionesEscribir ::= STRING 
            {
              Object RESULT =null;
		 System.out.println("SIM: OpcionesEscribir -> STRING "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OpcionesEscribir",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FuncionEscribir ::= ESCRIBIR OpcionesEscribir PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionEscribir -> OpcionesEscribir PUNTOYCOMA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionEscribir",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FuncionLeer ::= LEER ID PUNTOYCOMA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionLeer -> LEER ID PUNTOYCOMA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionLeer",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FuncionesMatematicas ::= REAL SENO INICIOPARENTESIS REAL ID FINALPARENTESIS FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionesMatematicas -> REAL SENO INICIOPARENTESIS REAL ID FINALPARENTESIS FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FuncionesMatematicas ::= REAL COSENO INICIOPARENTESIS REAL ID FINALPARENTESIS FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionesMatematicas -> REAL COSENO INICIOPARENTESIS REAL ID FINALPARENTESIS FINLINEA"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FuncionesMatematicas ::= REAL TANGENTE INICIOPARENTESIS REAL ID FINALPARENTESIS FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionesMatematicas -> REAL TANGENTE INICIOPARENTESIS REAL ID FINALPARENTESIS FINLINEA"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FuncionesMatematicas ::= REAL LOGARITMO INICIOPARENTESIS REAL ID FINALPARENTESIS FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionesMatematicas -> REAL LOGARITMO INICIOPARENTESIS REAL ID FINALPARENTESIS FINLINEA"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FuncionesMatematicas ::= REAL RAIZ INICIOPARENTESIS REAL ID FINALPARENTESIS FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionesMatematicas -> REAL RAIZ INICIOPARENTESIS REAL ID FINALPARENTESIS FINLINEA"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionesMatematicas",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Declaraciones ::= TipoDato Identificadores FINLINEA Declaraciones 
            {
              Object RESULT =null;
		 System.out.println("SIM: Declaraciones -> TipoDato Identificadores FINLINEA Declaraciones"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Declaraciones",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Declaraciones ::= TipoDato Identificadores FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: Declaraciones -> TipoDato Identificadores FINLINEA"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Declaraciones",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PropPublicas ::= PROPIEDADES PUBLICAS DOSPUNTOS FINLINEA Declaraciones PropPrivadas 
            {
              Object RESULT =null;
		 System.out.println("SIM: PropPublicas -> PROPIEDADES PUBLICAS DOSPUNTOS FINLINEA Declaraciones PropPrivadas"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PropPublicas",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PropPublicas ::= PropPrivadas 
            {
              Object RESULT =null;
		 System.out.println("SIM: PropPublicas -> PropPrivadas"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PropPublicas",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PropPrivadas ::= PROPIEDADES PRIVADAS DOSPUNTOS FINLINEA Declaraciones PropProtegidas 
            {
              Object RESULT =null;
		 System.out.println("SIM: PropPrivadas -> PROPIEDADES PRIVADAS DOSPUNTOS FINLINEA Declaraciones PropProtegidas"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PropPrivadas",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PropPrivadas ::= PropProtegidas 
            {
              Object RESULT =null;
		 System.out.println("SIM: PropPrivadas -> PropProtegidas"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PropPrivadas",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PropProtegidas ::= PROPIEDADES PROTEGIDAS DOSPUNTOS FINLINEA Declaraciones 
            {
              Object RESULT =null;
		 System.out.println("SIM: PropProtegidas -> PROPIEDADES PROTEGIDAS DOSPUNTOS FINLINEA Declaraciones FINLINEA"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PropProtegidas",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PropProtegidas ::= FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: PropProtegidas -> FINLINEA"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PropProtegidas",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MetodosPublicos ::= METODOS PUBLICOS DOSPUNTOS FINLINEA OpcionesPublicos MetodosPrivados 
            {
              Object RESULT =null;
		 System.out.println("SIM: MetodosPublicos -> METODOS PUBLICOS DOSPUNTOS FINLINEA OpcionesPublicos MetodosPrivados"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MetodosPublicos",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MetodosPublicos ::= MetodosPrivados 
            {
              Object RESULT =null;
		 System.out.println("SIM: MetodosPublicos -> MetodosPrivados"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MetodosPublicos",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MetodosPrivados ::= METODOS PRIVADOS DOSPUNTOS FINLINEA OpcionesPrivados MetodosProtegidos 
            {
              Object RESULT =null;
		 System.out.println("SIM: MetodosPrivados -> METODOS PRIVADOS DOSPUNTOS FINLINEA OpcionesPrivados MetodosProtegidos"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MetodosPrivados",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MetodosPrivados ::= MetodosProtegidos 
            {
              Object RESULT =null;
		 System.out.println("SIM: MetodosPrivados -> MetodosProtegidos"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MetodosPrivados",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // MetodosProtegidos ::= METODOS PROTEGIDOS DOSPUNTOS FINLINEA OpcionesProtegidos 
            {
              Object RESULT =null;
		 System.out.println("SIM: MetodosProtegidos -> METODOS PROTEGIDOS DOSPUNTOS FINLINEA OpcionesProtegidos FINLINEA "); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MetodosProtegidos",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MetodosProtegidos ::= FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: MetodosProtegidos -> FINLINEA"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MetodosProtegidos",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OpcionesPublicos ::= FuncionesSueltas OpcionesPublicos 
            {
              Object RESULT =null;
		 System.out.println("SIM: OpcionesPublicos -> FuncionesSueltas OpcionesPublicos"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OpcionesPublicos",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OpcionesPublicos ::= FuncionesSueltas 
            {
              Object RESULT =null;
		 System.out.println("SIM: OpcionesPublicos -> FuncionesSueltas"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OpcionesPublicos",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OpcionesPublicos ::= Constructor OpcionesPublicos 
            {
              Object RESULT =null;
		 System.out.println("SIM: OpcionesPublicos -> Constructor OpcionesPublicos"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OpcionesPublicos",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OpcionesPublicos ::= Constructor 
            {
              Object RESULT =null;
		 System.out.println("SIM: OpcionesPublicos -> Constructor"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OpcionesPublicos",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OpcionesPublicos ::= Destructor 
            {
              Object RESULT =null;
		 System.out.println("SIM: OpcionesPublicos -> Destructor");  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OpcionesPublicos",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OpcionesPrivados ::= FuncionesSueltas OpcionesPrivados 
            {
              Object RESULT =null;
		 System.out.println("SIM: OpcionesPrivados -> FuncionesSueltas OpcionesPrivados"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OpcionesPrivados",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OpcionesPrivados ::= FuncionesSueltas 
            {
              Object RESULT =null;
		 System.out.println("SIM: OpcionesPrivados -> FuncionesSueltas"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OpcionesPrivados",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OpcionesPrivados ::= Constructor OpcionesPrivados 
            {
              Object RESULT =null;
		 System.out.println("SIM: OpcionesPrivados -> Constructor OpcionesPublicos"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OpcionesPrivados",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OpcionesPrivados ::= Constructor 
            {
              Object RESULT =null;
		 System.out.println("SIM: OpcionesPrivados -> Constructor"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OpcionesPrivados",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OpcionesProtegidos ::= FuncionesSueltas 
            {
              Object RESULT =null;
		 System.out.println("SIM: OpcionesProtegidos -> FuncionesSueltas"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OpcionesProtegidos",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Clases ::= CLASE IDCLASE FINLINEA PropPublicas MetodosPublicos 
            {
              Object RESULT =null;
		 System.out.println("SIM: Clases -> CLASE IDCLASE FINLINEA PropPublicas MetodosPublicos"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Clases",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Clases ::= CLASE IDCLASE EXTIENDE IDCLASE FINLINEA PropPublicas MetodosPublicos 
            {
              Object RESULT =null;
		 System.out.println("SIM: Clases -> CLASE IDCLASE EXTIENDE IDCLASE FINLINEA PropPublicas MetodosPublicos"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Clases",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Constructor ::= CONSTRUCTOR INICIOPARENTESIS Parametros FINALPARENTESIS FINLINEA AsignarConstructor 
            {
              Object RESULT =null;
		 System.out.println("SIM: Constructor -> CONSTRUCTOR INICIOPARENTESIS Parametros FINALPARENTESIS FINLINEA AsignarConstructor"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constructor",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Constructor ::= CONSTRUCTOR INICIOPARENTESIS FINALPARENTESIS FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: Constructor -> CONSTRUCTOR INICIOPARENTESIS FINALPARENTESIS FINLINEA"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Constructor",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Destructor ::= DESTRUCTOR INICIOPARENTESIS FINALPARENTESIS FINLINEA MetodoDestructor 
            {
              Object RESULT =null;
		 System.out.println("SIM: Destructor -> DESTRUCTOR INICIOPARENTESIS FINALPARENTESIS FINLINEA MetodoDestructor"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Destructor",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // MetodoDestructor ::= ELIMINAR ID FINLINEA MetodoDestructor 
            {
              Object RESULT =null;
		 System.out.println("SIM: MetodoDestructor -> ELIMINAR ID FINLINEA MetodoDestructor"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MetodoDestructor",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MetodoDestructor ::= ELIMINAR ID FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: MetodoDestructor -> ELIMINAR ID FINLINEA"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MetodoDestructor",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // AsignarConstructor ::= ID IGUAL ID FINLINEA AsignarConstructor 
            {
              Object RESULT =null;
		 System.out.println("SIM: AsignarConstructor -> ID IGUAL ID FINLINEA AsignarConstructor"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("AsignarConstructor",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // AsignarConstructor ::= ID IGUAL ID FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: AsignarConstructor -> ID IGUAL ID FINLINEA"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("AsignarConstructor",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Instancia ::= IDCLASE ID IGUAL INSTANCIAR IDCLASE INICIOPARENTESIS FINALPARENTESIS FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: Instancia -> IDCLASE ID IGUAL INSTANCIAR IDCLASE INICIOPARENTESIS FINALPARENTESIS FINLINEA MetodoInstancia"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Instancia",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // MetodoInstancia ::= ESCRIBIR ID PUNTO ID FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: MetodoInstancia -> ESCRIBIR ID PUNTO ID FINLINEA"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MetodoInstancia",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MetodoInstancia ::= ELIMINAR IDCLASE FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: MetodoInstancia -> ELIMINAR IDCLASE FINLINEA"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MetodoInstancia",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ErrorInstancia ::= ELIMINAR IDCLASE FINLINEA ESCRIBIR ID PUNTO ID FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: ErrorInstancia -> ELIMINAR IDCLASE FINLINEA ESCRIBIR ID PUNTO ID FINLINEA"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorInstancia",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LineasCodigo ::= LineaCodigo LineasCodigo 
            {
              Object RESULT =null;
		 System.out.println("SIM: LineasCodigo -> LineasCodigo LineaCodigo"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LineasCodigo",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LineasCodigo ::= LineaCodigo 
            {
              Object RESULT =null;
		 System.out.println("SIM: LineasCodigo -> LineaCodigo"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LineasCodigo",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LineaCodigo ::= BibliotecaExterna 
            {
              Object RESULT =null;
		 System.out.println("SIM: LineaCodigo -> Bibliotecas"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LineaCodigo",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LineaCodigo ::= Clases 
            {
              Object RESULT =null;
		 System.out.println("SIM: LineaCodigo -> Clases"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LineaCodigo",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LineaCodigo ::= FuncionPrincipal 
            {
              Object RESULT =null;
		 System.out.println("SIM: LineaCodigo -> FuncionPrincipal"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LineaCodigo",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FuncionPrincipal ::= PRINCIPAL INICIOPARENTESIS FINALPARENTESIS FINLINEA Repetir 
            {
              Object RESULT =null;
		 System.out.println("SIM: FuncionPrincipal -> ENTERO PRINCIPAL INICIOPARENTESIS Parametros FINALPARENTESIS FINLINEA ContenidoPrincipal"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FuncionPrincipal",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Repetir ::= ContenidoPrincipal Repetir 
            {
              Object RESULT =null;
		 System.out.println("SIM: Repetir -> ContenidoPrincipal Repetir"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Repetir",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Repetir ::= ContenidoPrincipal 
            {
              Object RESULT =null;
		 System.out.println("SIM: Repetir -> ContenidoPrincipal"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Repetir",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ContenidoPrincipal ::= FuncionesSueltas 
            {
              Object RESULT =null;
		 System.out.println("SIM: ContenidoPrincipal ->  FuncionesSueltas"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContenidoPrincipal",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ContenidoPrincipal ::= Instancia 
            {
              Object RESULT =null;
		 System.out.println("SIM: ContenidoPrincipal ->  Instancia"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContenidoPrincipal",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ContenidoPrincipal ::= FuncionesMatematicas 
            {
              Object RESULT =null;
		 System.out.println("sim: LineaCodigo -> FuncionesMatematicas"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContenidoPrincipal",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ContenidoPrincipal ::= FuncionesEspeciales 
            {
              Object RESULT =null;
		 System.out.println("sim: LineaCodigo -> FuncionesEspeciales"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContenidoPrincipal",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ContenidoPrincipal ::= FuncionEscribir 
            {
              Object RESULT =null;
		 System.out.println("SIM: ContenidoPrincipal ->  FuncionEscribir"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContenidoPrincipal",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ContenidoPrincipal ::= FuncionLeer 
            {
              Object RESULT =null;
		 System.out.println("SIM: ContenidoPrincipal ->  FuncionLeer"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContenidoPrincipal",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ContenidoPrincipal ::= Asignar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ContenidoPrincipal",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // BibliotecaExterna ::= INCLUIR STRING FINLINEA 
            {
              Object RESULT =null;
		 System.out.println("SIM: BibliotecaExterna -> INCLUIR STRING FINLINEA"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BibliotecaExterna",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
